

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 18 22:28:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18324
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F18324 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0090                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0097                     	;# 
    93  009B                     	;# 
    94  009B                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009E                     	;# 
    98  009F                     	;# 
    99  010C                     	;# 
   100  010E                     	;# 
   101  0111                     	;# 
   102  0112                     	;# 
   103  0113                     	;# 
   104  0114                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  018C                     	;# 
   111  018E                     	;# 
   112  0197                     	;# 
   113  0199                     	;# 
   114  0199                     	;# 
   115  0199                     	;# 
   116  019A                     	;# 
   117  019A                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019B                     	;# 
   124  019C                     	;# 
   125  019C                     	;# 
   126  019C                     	;# 
   127  019D                     	;# 
   128  019D                     	;# 
   129  019D                     	;# 
   130  019E                     	;# 
   131  019E                     	;# 
   132  019E                     	;# 
   133  019F                     	;# 
   134  019F                     	;# 
   135  019F                     	;# 
   136  019F                     	;# 
   137  019F                     	;# 
   138  020C                     	;# 
   139  020E                     	;# 
   140  0211                     	;# 
   141  0211                     	;# 
   142  0212                     	;# 
   143  0212                     	;# 
   144  0213                     	;# 
   145  0213                     	;# 
   146  0214                     	;# 
   147  0214                     	;# 
   148  0215                     	;# 
   149  0215                     	;# 
   150  0215                     	;# 
   151  0215                     	;# 
   152  0216                     	;# 
   153  0216                     	;# 
   154  0217                     	;# 
   155  0217                     	;# 
   156  028C                     	;# 
   157  028E                     	;# 
   158  0291                     	;# 
   159  0291                     	;# 
   160  0292                     	;# 
   161  0293                     	;# 
   162  0294                     	;# 
   163  0295                     	;# 
   164  0295                     	;# 
   165  0296                     	;# 
   166  0297                     	;# 
   167  0298                     	;# 
   168  029F                     	;# 
   169  030C                     	;# 
   170  030E                     	;# 
   171  0311                     	;# 
   172  0311                     	;# 
   173  0312                     	;# 
   174  0313                     	;# 
   175  0314                     	;# 
   176  0315                     	;# 
   177  0315                     	;# 
   178  0316                     	;# 
   179  0317                     	;# 
   180  0318                     	;# 
   181  038C                     	;# 
   182  038E                     	;# 
   183  0391                     	;# 
   184  0392                     	;# 
   185  0393                     	;# 
   186  0397                     	;# 
   187  0398                     	;# 
   188  0399                     	;# 
   189  039A                     	;# 
   190  039C                     	;# 
   191  039D                     	;# 
   192  039E                     	;# 
   193  039F                     	;# 
   194  0411                     	;# 
   195  0411                     	;# 
   196  0412                     	;# 
   197  0413                     	;# 
   198  0414                     	;# 
   199  0415                     	;# 
   200  0416                     	;# 
   201  0417                     	;# 
   202  0418                     	;# 
   203  0418                     	;# 
   204  0419                     	;# 
   205  041A                     	;# 
   206  041B                     	;# 
   207  041C                     	;# 
   208  041D                     	;# 
   209  041E                     	;# 
   210  041F                     	;# 
   211  0498                     	;# 
   212  0498                     	;# 
   213  0499                     	;# 
   214  049A                     	;# 
   215  049B                     	;# 
   216  049B                     	;# 
   217  049C                     	;# 
   218  049D                     	;# 
   219  049E                     	;# 
   220  049F                     	;# 
   221  0617                     	;# 
   222  0618                     	;# 
   223  0619                     	;# 
   224  0619                     	;# 
   225  061A                     	;# 
   226  061B                     	;# 
   227  061C                     	;# 
   228  061C                     	;# 
   229  061F                     	;# 
   230  0691                     	;# 
   231  0692                     	;# 
   232  0693                     	;# 
   233  0694                     	;# 
   234  0695                     	;# 
   235  0696                     	;# 
   236  0697                     	;# 
   237  0698                     	;# 
   238  0699                     	;# 
   239  0711                     	;# 
   240  0712                     	;# 
   241  0713                     	;# 
   242  0714                     	;# 
   243  0715                     	;# 
   244  0716                     	;# 
   245  0717                     	;# 
   246  0718                     	;# 
   247  0719                     	;# 
   248  0891                     	;# 
   249  0891                     	;# 
   250  0891                     	;# 
   251  0891                     	;# 
   252  0891                     	;# 
   253  0891                     	;# 
   254  0892                     	;# 
   255  0892                     	;# 
   256  0892                     	;# 
   257  0893                     	;# 
   258  0893                     	;# 
   259  0893                     	;# 
   260  0893                     	;# 
   261  0893                     	;# 
   262  0893                     	;# 
   263  0894                     	;# 
   264  0894                     	;# 
   265  0894                     	;# 
   266  0895                     	;# 
   267  0895                     	;# 
   268  0895                     	;# 
   269  0896                     	;# 
   270  0896                     	;# 
   271  0896                     	;# 
   272  089B                     	;# 
   273  0911                     	;# 
   274  0912                     	;# 
   275  0913                     	;# 
   276  0914                     	;# 
   277  0915                     	;# 
   278  0916                     	;# 
   279  0918                     	;# 
   280  0919                     	;# 
   281  091A                     	;# 
   282  091B                     	;# 
   283  091C                     	;# 
   284  091D                     	;# 
   285  091E                     	;# 
   286  091F                     	;# 
   287  0E0F                     	;# 
   288  0E10                     	;# 
   289  0E11                     	;# 
   290  0E12                     	;# 
   291  0E13                     	;# 
   292  0E14                     	;# 
   293  0E15                     	;# 
   294  0E16                     	;# 
   295  0E17                     	;# 
   296  0E18                     	;# 
   297  0E19                     	;# 
   298  0E1A                     	;# 
   299  0E1B                     	;# 
   300  0E1C                     	;# 
   301  0E20                     	;# 
   302  0E21                     	;# 
   303  0E22                     	;# 
   304  0E24                     	;# 
   305  0E25                     	;# 
   306  0E28                     	;# 
   307  0E29                     	;# 
   308  0E2A                     	;# 
   309  0E2B                     	;# 
   310  0E2C                     	;# 
   311  0E2D                     	;# 
   312  0E2E                     	;# 
   313  0E2F                     	;# 
   314  0E90                     	;# 
   315  0E91                     	;# 
   316  0E92                     	;# 
   317  0E94                     	;# 
   318  0E95                     	;# 
   319  0EA0                     	;# 
   320  0EA1                     	;# 
   321  0EA2                     	;# 
   322  0EA3                     	;# 
   323  0EA4                     	;# 
   324  0EA5                     	;# 
   325  0F0F                     	;# 
   326  0F10                     	;# 
   327  0F11                     	;# 
   328  0F12                     	;# 
   329  0F13                     	;# 
   330  0F14                     	;# 
   331  0F15                     	;# 
   332  0F16                     	;# 
   333  0F17                     	;# 
   334  0F18                     	;# 
   335  0F19                     	;# 
   336  0F1A                     	;# 
   337  0F1B                     	;# 
   338  0F1C                     	;# 
   339  0F1D                     	;# 
   340  0F1E                     	;# 
   341  0F1F                     	;# 
   342  0F20                     	;# 
   343  0F21                     	;# 
   344  0F22                     	;# 
   345  0F23                     	;# 
   346  0F24                     	;# 
   347  0F25                     	;# 
   348  0F26                     	;# 
   349  0F27                     	;# 
   350  0F28                     	;# 
   351  0F29                     	;# 
   352  0F2A                     	;# 
   353  0F2B                     	;# 
   354  0F2C                     	;# 
   355  0F2D                     	;# 
   356  0F2E                     	;# 
   357  0F2F                     	;# 
   358  0F30                     	;# 
   359  0F31                     	;# 
   360  0F32                     	;# 
   361  0F33                     	;# 
   362  0F34                     	;# 
   363  0F35                     	;# 
   364  0F36                     	;# 
   365  0F37                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0016                     _TMR0Hbits	set	22
   378  000B                     _INTCONbits	set	11
   379  0018                     _T0CON1	set	24
   380  0017                     _T0CON0	set	23
   381  000E                     _PORTCbits	set	14
   382  0085                     _TMR0IF	set	133
   383  009C                     _ADRESH	set	156
   384  009D                     _ADCON0bits	set	157
   385  0090                     _PIE0	set	144
   386  009E                     _ADCON1	set	158
   387  009D                     _ADCON0	set	157
   388  008E                     _TRISCbits	set	142
   389  008E                     _TRISC	set	142
   390  0485                     _TMR0IE	set	1157
   391  0117                     _FVRCON	set	279
   392  018E                     _ANSELCbits	set	398
   393  0214                     _SSP1STATbits	set	532
   394  0211                     _SSP1BUF	set	529
   395  0215                     _SSP1CONbits	set	533
   396  0215                     _SSP1CON1	set	533
   397  091F                     _OSCFRQ	set	2335
   398  0919                     _OSCCON1	set	2329
   399  0E0F                     _PPSLOCK	set	3599
   400  0EA4                     _RC4PPS	set	3748
   401  0EA5                     _RC5PPS	set	3749
   402                           
   403                           ; #config settings
   404  0000                     
   405                           	psect	cinit
   406  001F                     start_initialization:	
   407  001F                     __initialization:	
   408                           
   409                           ; Clear objects allocated to COMMON
   410  001F  01F8               	clrf	__pbssCOMMON& (0+127)
   411  0020  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   412  0021  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   413  0022                     end_of_initialization:	
   414                           ;End of C runtime variable initialization code
   415                           
   416  0022                     __end_of__initialization:	
   417  0022  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   418  0023  0020               	movlb	0
   419  0024  3185  2DF2         	ljmp	_main	;jump to C main() function
   420                           
   421                           	psect	bssCOMMON
   422  0078                     __pbssCOMMON:	
   423  0078                     _count:	
   424  0078                     	ds	2
   425  007A                     _ADC_H:	
   426  007A                     	ds	1
   427                           
   428                           	psect	cstackCOMMON
   429  0070                     __pcstackCOMMON:	
   430  0070                     ?_ADC_Init:	
   431  0070                     ?_Timer0_Init:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_MAX7219_Init:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_UpdateDisplay:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_SPI_SHIFT_8:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_main:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_my_isr:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ??_my_isr:	
   450                           ; 1 bytes @ 0x0
   451                           
   452                           
   453                           ; 1 bytes @ 0x0
   454  0070                     	ds	2
   455  0072                     ??_ADC_Init:	
   456  0072                     ??_Timer0_Init:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     ??_SPI_SHIFT_8:	
   460                           ; 1 bytes @ 0x2
   461                           
   462  0072                     SPI_SHIFT_8@data:	
   463                           ; 1 bytes @ 0x2
   464                           
   465                           
   466                           ; 1 bytes @ 0x2
   467  0072                     	ds	1
   468  0073                     ?_MAX7219_Transfer:	
   469  0073                     MAX7219_Transfer@value:	
   470                           ; 1 bytes @ 0x3
   471                           
   472                           
   473                           ; 1 bytes @ 0x3
   474  0073                     	ds	1
   475  0074                     ??_MAX7219_Transfer:	
   476                           
   477                           ; 1 bytes @ 0x4
   478  0074                     	ds	2
   479  0076                     MAX7219_Transfer@address:	
   480                           
   481                           ; 1 bytes @ 0x6
   482  0076                     	ds	1
   483  0077                     ??_MAX7219_Init:	
   484  0077                     ??_UpdateDisplay:	
   485                           ; 1 bytes @ 0x7
   486                           
   487                           
   488                           ; 1 bytes @ 0x7
   489  0077                     	ds	1
   490                           
   491                           	psect	cstackBANK0
   492  0020                     __pcstackBANK0:	
   493  0020                     ??_main:	
   494                           
   495                           ; 1 bytes @ 0x0
   496  0020                     	ds	2
   497                           
   498                           	psect	maintext
   499  05F2                     __pmaintext:	
   500 ;;
   501 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   502 ;;
   503 ;; *************** function _main *****************
   504 ;; Defined at:
   505 ;;		line 68 in file "main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, pclath, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : B1F/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   519 ;;      Params:         0       0       0       0       0       0       0       0
   520 ;;      Locals:         0       0       0       0       0       0       0       0
   521 ;;      Temps:          0       2       0       0       0       0       0       0
   522 ;;      Totals:         0       2       0       0       0       0       0       0
   523 ;;Total ram usage:        2 bytes
   524 ;; Hardware stack levels required when called:    4
   525 ;; This function calls:
   526 ;;		_ADC_Init
   527 ;;		_MAX7219_Init
   528 ;;		_Timer0_Init
   529 ;;		_UpdateDisplay
   530 ;; This function is called by:
   531 ;;		Startup code after reset
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           
   536                           ;psect for function _main
   537  05F2                     _main:	
   538                           
   539                           ;main.c: 70: OSCCON1 = 0x60;
   540                           
   541                           ;incstack = 0
   542                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   543  05F2  3060               	movlw	96
   544  05F3  0032               	movlb	18	; select bank18
   545  05F4  0099               	movwf	25	;volatile
   546                           
   547                           ;main.c: 71: OSCFRQ = 0x03;
   548  05F5  3003               	movlw	3
   549  05F6  009F               	movwf	31	;volatile
   550                           
   551                           ;main.c: 73: ADC_Init();
   552  05F7  3186  2653  3185   	fcall	_ADC_Init
   553                           
   554                           ;main.c: 74: Timer0_Init();
   555  05FA  3186  2646  3185   	fcall	_Timer0_Init
   556                           
   557                           ;main.c: 76: TRISC = 0b1111111;
   558  05FD  307F               	movlw	127
   559  05FE  0021               	movlb	1	; select bank1
   560  05FF  008E               	movwf	14	;volatile
   561                           
   562                           ;main.c: 77: TRISCbits.TRISC5 = 0;
   563  0600  128E               	bcf	14,5	;volatile
   564                           
   565                           ;main.c: 78: TRISCbits.TRISC4 = 0;
   566  0601  120E               	bcf	14,4	;volatile
   567                           
   568                           ;main.c: 79: TRISCbits.TRISC3 = 0;
   569  0602  118E               	bcf	14,3	;volatile
   570                           
   571                           ;main.c: 80: TRISCbits.TRISC2 = 1;
   572  0603  150E               	bsf	14,2	;volatile
   573                           
   574                           ;main.c: 89: SSP1CON1 = 0b00110000;
   575  0604  3030               	movlw	48
   576  0605  0024               	movlb	4	; select bank4
   577  0606  0095               	movwf	21	;volatile
   578                           
   579                           ;main.c: 90: RC5PPS = 0b11001;
   580  0607  3019               	movlw	25
   581  0608  003D               	movlb	29	; select bank29
   582  0609  00A5               	movwf	37	;volatile
   583                           
   584                           ;main.c: 91: RC4PPS = 0b11000;
   585  060A  3018               	movlw	24
   586  060B  00A4               	movwf	36	;volatile
   587                           
   588                           ;main.c: 92: PPSLOCK = 1;
   589  060C  3001               	movlw	1
   590  060D  003C               	movlb	28	; select bank28
   591  060E  008F               	movwf	15	;volsfr
   592                           
   593                           ;main.c: 94: MAX7219_Init();
   594  060F  3185  25B4  3185   	fcall	_MAX7219_Init
   595                           
   596                           ;main.c: 96: TMR0IF = 0;
   597  0612  0020               	movlb	0	; select bank0
   598  0613  1290               	bcf	16,5	;volatile
   599  0614                     l1888:	
   600                           ;main.c: 98: while (1)
   601                           
   602                           
   603                           ;main.c: 99: {
   604                           ;main.c: 100: if (count++ >= 30000)
   605  0614  0879               	movf	_count+1,w
   606  0615  0020               	movlb	0	; select bank0
   607  0616  00A1               	movwf	??_main+1
   608  0617  0878               	movf	_count,w
   609  0618  00A0               	movwf	??_main
   610  0619  0AF8               	incf	_count,f
   611  061A  1903               	skipnz
   612  061B  0AF9               	incf	_count+1,f
   613  061C  3075               	movlw	117
   614  061D  0221               	subwf	??_main+1,w
   615  061E  3030               	movlw	48
   616  061F  1903               	skipnz
   617  0620  0220               	subwf	??_main,w
   618  0621  1C03               	skipc
   619  0622  2E14               	goto	l1888
   620                           
   621                           ;main.c: 101: {
   622                           ;main.c: 102: UpdateDisplay();
   623  0623  3180  2026  3185   	fcall	_UpdateDisplay
   624                           
   625                           ;main.c: 103: count = 0;
   626  0626  01F8               	clrf	_count
   627  0627  01F9               	clrf	_count+1
   628  0628  2E14               	goto	l1888
   629  0629                     __end_of_main:	
   630                           
   631                           	psect	text1
   632  0026                     __ptext1:	
   633 ;; *************** function _UpdateDisplay *****************
   634 ;; Defined at:
   635 ;;		line 170 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;		None
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2, status,0, pclath, cstack
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   649 ;;      Params:         0       0       0       0       0       0       0       0
   650 ;;      Locals:         0       0       0       0       0       0       0       0
   651 ;;      Temps:          1       0       0       0       0       0       0       0
   652 ;;      Totals:         1       0       0       0       0       0       0       0
   653 ;;Total ram usage:        1 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:    3
   656 ;; This function calls:
   657 ;;		_MAX7219_Transfer
   658 ;; This function is called by:
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           
   664                           ;psect for function _UpdateDisplay
   665  0026                     _UpdateDisplay:	
   666                           
   667                           ;main.c: 172: if(ADC_H >= 29 && ADC_H <= 38)
   668                           
   669                           ;incstack = 0
   670                           ; Regs used in _UpdateDisplay: [wreg+status,2+status,0+pclath+cstack]
   671  0026  301D               	movlw	29
   672  0027  027A               	subwf	_ADC_H,w
   673  0028  1C03               	skipc
   674  0029  28A2               	goto	l1400
   675  002A  3027               	movlw	39
   676  002B  027A               	subwf	_ADC_H,w
   677  002C  1803               	skipnc
   678  002D  28A2               	goto	l1400
   679                           
   680                           ;main.c: 173: {
   681                           ;main.c: 174: MAX7219_Transfer(0x01, 0);
   682  002E  01F3               	clrf	MAX7219_Transfer@value
   683  002F  3001               	movlw	1
   684  0030  3186  2629  3180   	fcall	_MAX7219_Transfer
   685                           
   686                           ;main.c: 177: if(ADC_H == 30) MAX7219_Transfer(0x02, 1);
   687  0033  301E               	movlw	30
   688  0034  067A               	xorwf	_ADC_H,w
   689  0035  1D03               	btfss	3,2
   690  0036  283D               	goto	l1366
   691  0037  01F3               	clrf	MAX7219_Transfer@value
   692  0038  0AF3               	incf	MAX7219_Transfer@value,f
   693  0039  3002               	movlw	2
   694  003A  3186  2629         	fcall	_MAX7219_Transfer
   695  003C  0008               	return
   696  003D                     l1366:	
   697                           
   698                           ;main.c: 178: else if (ADC_H == 31) MAX7219_Transfer(0x02, 2);
   699  003D  301F               	movlw	31
   700  003E  067A               	xorwf	_ADC_H,w
   701  003F  1D03               	btfss	3,2
   702  0040  2849               	goto	l1370
   703  0041  3002               	movlw	2
   704  0042  00F7               	movwf	??_UpdateDisplay
   705  0043  0877               	movf	??_UpdateDisplay,w
   706  0044  00F3               	movwf	MAX7219_Transfer@value
   707  0045  3002               	movlw	2
   708  0046  3186  2629         	fcall	_MAX7219_Transfer
   709  0048  0008               	return
   710  0049                     l1370:	
   711                           
   712                           ;main.c: 179: else if (ADC_H == 32) MAX7219_Transfer(0x02, 3);
   713  0049  3020               	movlw	32
   714  004A  067A               	xorwf	_ADC_H,w
   715  004B  1D03               	btfss	3,2
   716  004C  2855               	goto	l1374
   717  004D  3003               	movlw	3
   718  004E  00F7               	movwf	??_UpdateDisplay
   719  004F  0877               	movf	??_UpdateDisplay,w
   720  0050  00F3               	movwf	MAX7219_Transfer@value
   721  0051  3002               	movlw	2
   722  0052  3186  2629         	fcall	_MAX7219_Transfer
   723  0054  0008               	return
   724  0055                     l1374:	
   725                           
   726                           ;main.c: 180: else if (ADC_H == 33) MAX7219_Transfer(0x02, 4);
   727  0055  3021               	movlw	33
   728  0056  067A               	xorwf	_ADC_H,w
   729  0057  1D03               	btfss	3,2
   730  0058  2861               	goto	l1378
   731  0059  3004               	movlw	4
   732  005A  00F7               	movwf	??_UpdateDisplay
   733  005B  0877               	movf	??_UpdateDisplay,w
   734  005C  00F3               	movwf	MAX7219_Transfer@value
   735  005D  3002               	movlw	2
   736  005E  3186  2629         	fcall	_MAX7219_Transfer
   737  0060  0008               	return
   738  0061                     l1378:	
   739                           
   740                           ;main.c: 181: else if (ADC_H == 34) MAX7219_Transfer(0x02, 5);
   741  0061  3022               	movlw	34
   742  0062  067A               	xorwf	_ADC_H,w
   743  0063  1D03               	btfss	3,2
   744  0064  286D               	goto	l1382
   745  0065  3005               	movlw	5
   746  0066  00F7               	movwf	??_UpdateDisplay
   747  0067  0877               	movf	??_UpdateDisplay,w
   748  0068  00F3               	movwf	MAX7219_Transfer@value
   749  0069  3002               	movlw	2
   750  006A  3186  2629         	fcall	_MAX7219_Transfer
   751  006C  0008               	return
   752  006D                     l1382:	
   753                           
   754                           ;main.c: 182: else if (ADC_H == 35) MAX7219_Transfer(0x02, 6);
   755  006D  3023               	movlw	35
   756  006E  067A               	xorwf	_ADC_H,w
   757  006F  1D03               	btfss	3,2
   758  0070  2879               	goto	l1386
   759  0071  3006               	movlw	6
   760  0072  00F7               	movwf	??_UpdateDisplay
   761  0073  0877               	movf	??_UpdateDisplay,w
   762  0074  00F3               	movwf	MAX7219_Transfer@value
   763  0075  3002               	movlw	2
   764  0076  3186  2629         	fcall	_MAX7219_Transfer
   765  0078  0008               	return
   766  0079                     l1386:	
   767                           
   768                           ;main.c: 183: else if (ADC_H == 36) MAX7219_Transfer(0x02, 7);
   769  0079  3024               	movlw	36
   770  007A  067A               	xorwf	_ADC_H,w
   771  007B  1D03               	btfss	3,2
   772  007C  2885               	goto	l1390
   773  007D  3007               	movlw	7
   774  007E  00F7               	movwf	??_UpdateDisplay
   775  007F  0877               	movf	??_UpdateDisplay,w
   776  0080  00F3               	movwf	MAX7219_Transfer@value
   777  0081  3002               	movlw	2
   778  0082  3186  2629         	fcall	_MAX7219_Transfer
   779  0084  0008               	return
   780  0085                     l1390:	
   781                           
   782                           ;main.c: 184: else if (ADC_H == 37) MAX7219_Transfer(0x02, 8);
   783  0085  3025               	movlw	37
   784  0086  067A               	xorwf	_ADC_H,w
   785  0087  1D03               	btfss	3,2
   786  0088  2891               	goto	l1394
   787  0089  3008               	movlw	8
   788  008A  00F7               	movwf	??_UpdateDisplay
   789  008B  0877               	movf	??_UpdateDisplay,w
   790  008C  00F3               	movwf	MAX7219_Transfer@value
   791  008D  3002               	movlw	2
   792  008E  3186  2629         	fcall	_MAX7219_Transfer
   793  0090  0008               	return
   794  0091                     l1394:	
   795                           
   796                           ;main.c: 185: else if (ADC_H == 38) MAX7219_Transfer(0x02, 9);
   797  0091  3026               	movlw	38
   798  0092  067A               	xorwf	_ADC_H,w
   799  0093  1D03               	btfss	3,2
   800  0094  289D               	goto	l1398
   801  0095  3009               	movlw	9
   802  0096  00F7               	movwf	??_UpdateDisplay
   803  0097  0877               	movf	??_UpdateDisplay,w
   804  0098  00F3               	movwf	MAX7219_Transfer@value
   805  0099  3002               	movlw	2
   806  009A  3186  2629         	fcall	_MAX7219_Transfer
   807  009C  0008               	return
   808  009D                     l1398:	
   809                           
   810                           ;main.c: 186: else MAX7219_Transfer(0x02, 0);
   811  009D  01F3               	clrf	MAX7219_Transfer@value
   812  009E  3002               	movlw	2
   813  009F  3186  2629         	fcall	_MAX7219_Transfer
   814                           
   815                           ;main.c: 187: }
   816  00A1  0008               	return
   817  00A2                     l1400:	
   818                           
   819                           ;main.c: 188: else if(ADC_H >= 39 && ADC_H <= 48)
   820  00A2  3027               	movlw	39
   821  00A3  027A               	subwf	_ADC_H,w
   822  00A4  1C03               	skipc
   823  00A5  291F               	goto	l1444
   824  00A6  3031               	movlw	49
   825  00A7  027A               	subwf	_ADC_H,w
   826  00A8  1803               	skipnc
   827  00A9  291F               	goto	l1444
   828                           
   829                           ;main.c: 189: {
   830                           ;main.c: 190: MAX7219_Transfer(0x01, 1);
   831  00AA  01F3               	clrf	MAX7219_Transfer@value
   832  00AB  0AF3               	incf	MAX7219_Transfer@value,f
   833  00AC  3001               	movlw	1
   834  00AD  3186  2629  3180   	fcall	_MAX7219_Transfer
   835                           
   836                           ;main.c: 193: if(ADC_H == 40) MAX7219_Transfer(0x02, 1);
   837  00B0  3028               	movlw	40
   838  00B1  067A               	xorwf	_ADC_H,w
   839  00B2  1D03               	btfss	3,2
   840  00B3  28BA               	goto	l1410
   841  00B4  01F3               	clrf	MAX7219_Transfer@value
   842  00B5  0AF3               	incf	MAX7219_Transfer@value,f
   843  00B6  3002               	movlw	2
   844  00B7  3186  2629         	fcall	_MAX7219_Transfer
   845  00B9  0008               	return
   846  00BA                     l1410:	
   847                           
   848                           ;main.c: 194: else if (ADC_H == 41) MAX7219_Transfer(0x02, 2);
   849  00BA  3029               	movlw	41
   850  00BB  067A               	xorwf	_ADC_H,w
   851  00BC  1D03               	btfss	3,2
   852  00BD  28C6               	goto	l1414
   853  00BE  3002               	movlw	2
   854  00BF  00F7               	movwf	??_UpdateDisplay
   855  00C0  0877               	movf	??_UpdateDisplay,w
   856  00C1  00F3               	movwf	MAX7219_Transfer@value
   857  00C2  3002               	movlw	2
   858  00C3  3186  2629         	fcall	_MAX7219_Transfer
   859  00C5  0008               	return
   860  00C6                     l1414:	
   861                           
   862                           ;main.c: 195: else if (ADC_H == 42) MAX7219_Transfer(0x02, 3);
   863  00C6  302A               	movlw	42
   864  00C7  067A               	xorwf	_ADC_H,w
   865  00C8  1D03               	btfss	3,2
   866  00C9  28D2               	goto	l1418
   867  00CA  3003               	movlw	3
   868  00CB  00F7               	movwf	??_UpdateDisplay
   869  00CC  0877               	movf	??_UpdateDisplay,w
   870  00CD  00F3               	movwf	MAX7219_Transfer@value
   871  00CE  3002               	movlw	2
   872  00CF  3186  2629         	fcall	_MAX7219_Transfer
   873  00D1  0008               	return
   874  00D2                     l1418:	
   875                           
   876                           ;main.c: 196: else if (ADC_H == 43) MAX7219_Transfer(0x02, 4);
   877  00D2  302B               	movlw	43
   878  00D3  067A               	xorwf	_ADC_H,w
   879  00D4  1D03               	btfss	3,2
   880  00D5  28DE               	goto	l1422
   881  00D6  3004               	movlw	4
   882  00D7  00F7               	movwf	??_UpdateDisplay
   883  00D8  0877               	movf	??_UpdateDisplay,w
   884  00D9  00F3               	movwf	MAX7219_Transfer@value
   885  00DA  3002               	movlw	2
   886  00DB  3186  2629         	fcall	_MAX7219_Transfer
   887  00DD  0008               	return
   888  00DE                     l1422:	
   889                           
   890                           ;main.c: 197: else if (ADC_H == 44) MAX7219_Transfer(0x02, 5);
   891  00DE  302C               	movlw	44
   892  00DF  067A               	xorwf	_ADC_H,w
   893  00E0  1D03               	btfss	3,2
   894  00E1  28EA               	goto	l1426
   895  00E2  3005               	movlw	5
   896  00E3  00F7               	movwf	??_UpdateDisplay
   897  00E4  0877               	movf	??_UpdateDisplay,w
   898  00E5  00F3               	movwf	MAX7219_Transfer@value
   899  00E6  3002               	movlw	2
   900  00E7  3186  2629         	fcall	_MAX7219_Transfer
   901  00E9  0008               	return
   902  00EA                     l1426:	
   903                           
   904                           ;main.c: 198: else if (ADC_H == 45) MAX7219_Transfer(0x02, 6);
   905  00EA  302D               	movlw	45
   906  00EB  067A               	xorwf	_ADC_H,w
   907  00EC  1D03               	btfss	3,2
   908  00ED  28F6               	goto	l1430
   909  00EE  3006               	movlw	6
   910  00EF  00F7               	movwf	??_UpdateDisplay
   911  00F0  0877               	movf	??_UpdateDisplay,w
   912  00F1  00F3               	movwf	MAX7219_Transfer@value
   913  00F2  3002               	movlw	2
   914  00F3  3186  2629         	fcall	_MAX7219_Transfer
   915  00F5  0008               	return
   916  00F6                     l1430:	
   917                           
   918                           ;main.c: 199: else if (ADC_H == 46) MAX7219_Transfer(0x02, 7);
   919  00F6  302E               	movlw	46
   920  00F7  067A               	xorwf	_ADC_H,w
   921  00F8  1D03               	btfss	3,2
   922  00F9  2902               	goto	l1434
   923  00FA  3007               	movlw	7
   924  00FB  00F7               	movwf	??_UpdateDisplay
   925  00FC  0877               	movf	??_UpdateDisplay,w
   926  00FD  00F3               	movwf	MAX7219_Transfer@value
   927  00FE  3002               	movlw	2
   928  00FF  3186  2629         	fcall	_MAX7219_Transfer
   929  0101  0008               	return
   930  0102                     l1434:	
   931                           
   932                           ;main.c: 200: else if (ADC_H == 47) MAX7219_Transfer(0x02, 8);
   933  0102  302F               	movlw	47
   934  0103  067A               	xorwf	_ADC_H,w
   935  0104  1D03               	btfss	3,2
   936  0105  290E               	goto	l1438
   937  0106  3008               	movlw	8
   938  0107  00F7               	movwf	??_UpdateDisplay
   939  0108  0877               	movf	??_UpdateDisplay,w
   940  0109  00F3               	movwf	MAX7219_Transfer@value
   941  010A  3002               	movlw	2
   942  010B  3186  2629         	fcall	_MAX7219_Transfer
   943  010D  0008               	return
   944  010E                     l1438:	
   945                           
   946                           ;main.c: 201: else if (ADC_H == 48) MAX7219_Transfer(0x02, 9);
   947  010E  3030               	movlw	48
   948  010F  067A               	xorwf	_ADC_H,w
   949  0110  1D03               	btfss	3,2
   950  0111  291A               	goto	l1442
   951  0112  3009               	movlw	9
   952  0113  00F7               	movwf	??_UpdateDisplay
   953  0114  0877               	movf	??_UpdateDisplay,w
   954  0115  00F3               	movwf	MAX7219_Transfer@value
   955  0116  3002               	movlw	2
   956  0117  3186  2629         	fcall	_MAX7219_Transfer
   957  0119  0008               	return
   958  011A                     l1442:	
   959                           
   960                           ;main.c: 202: else MAX7219_Transfer(0x02, 0);
   961  011A  01F3               	clrf	MAX7219_Transfer@value
   962  011B  3002               	movlw	2
   963  011C  3186  2629         	fcall	_MAX7219_Transfer
   964                           
   965                           ;main.c: 203: }
   966  011E  0008               	return
   967  011F                     l1444:	
   968                           
   969                           ;main.c: 204: else if(ADC_H >= 49 && ADC_H <= 58)
   970  011F  3031               	movlw	49
   971  0120  027A               	subwf	_ADC_H,w
   972  0121  1C03               	skipc
   973  0122  299E               	goto	l1488
   974  0123  303B               	movlw	59
   975  0124  027A               	subwf	_ADC_H,w
   976  0125  1803               	skipnc
   977  0126  299E               	goto	l1488
   978                           
   979                           ;main.c: 205: {
   980                           ;main.c: 206: MAX7219_Transfer(0x01, 2);
   981  0127  3002               	movlw	2
   982  0128  00F7               	movwf	??_UpdateDisplay
   983  0129  0877               	movf	??_UpdateDisplay,w
   984  012A  00F3               	movwf	MAX7219_Transfer@value
   985  012B  3001               	movlw	1
   986  012C  3186  2629  3180   	fcall	_MAX7219_Transfer
   987                           
   988                           ;main.c: 209: if(ADC_H == 50) MAX7219_Transfer(0x02, 1);
   989  012F  3032               	movlw	50
   990  0130  067A               	xorwf	_ADC_H,w
   991  0131  1D03               	btfss	3,2
   992  0132  2939               	goto	l1454
   993  0133  01F3               	clrf	MAX7219_Transfer@value
   994  0134  0AF3               	incf	MAX7219_Transfer@value,f
   995  0135  3002               	movlw	2
   996  0136  3186  2629         	fcall	_MAX7219_Transfer
   997  0138  0008               	return
   998  0139                     l1454:	
   999                           
  1000                           ;main.c: 210: else if (ADC_H == 51) MAX7219_Transfer(0x02, 2);
  1001  0139  3033               	movlw	51
  1002  013A  067A               	xorwf	_ADC_H,w
  1003  013B  1D03               	btfss	3,2
  1004  013C  2945               	goto	l1458
  1005  013D  3002               	movlw	2
  1006  013E  00F7               	movwf	??_UpdateDisplay
  1007  013F  0877               	movf	??_UpdateDisplay,w
  1008  0140  00F3               	movwf	MAX7219_Transfer@value
  1009  0141  3002               	movlw	2
  1010  0142  3186  2629         	fcall	_MAX7219_Transfer
  1011  0144  0008               	return
  1012  0145                     l1458:	
  1013                           
  1014                           ;main.c: 211: else if (ADC_H == 52) MAX7219_Transfer(0x02, 3);
  1015  0145  3034               	movlw	52
  1016  0146  067A               	xorwf	_ADC_H,w
  1017  0147  1D03               	btfss	3,2
  1018  0148  2951               	goto	l1462
  1019  0149  3003               	movlw	3
  1020  014A  00F7               	movwf	??_UpdateDisplay
  1021  014B  0877               	movf	??_UpdateDisplay,w
  1022  014C  00F3               	movwf	MAX7219_Transfer@value
  1023  014D  3002               	movlw	2
  1024  014E  3186  2629         	fcall	_MAX7219_Transfer
  1025  0150  0008               	return
  1026  0151                     l1462:	
  1027                           
  1028                           ;main.c: 212: else if (ADC_H == 53) MAX7219_Transfer(0x02, 4);
  1029  0151  3035               	movlw	53
  1030  0152  067A               	xorwf	_ADC_H,w
  1031  0153  1D03               	btfss	3,2
  1032  0154  295D               	goto	l1466
  1033  0155  3004               	movlw	4
  1034  0156  00F7               	movwf	??_UpdateDisplay
  1035  0157  0877               	movf	??_UpdateDisplay,w
  1036  0158  00F3               	movwf	MAX7219_Transfer@value
  1037  0159  3002               	movlw	2
  1038  015A  3186  2629         	fcall	_MAX7219_Transfer
  1039  015C  0008               	return
  1040  015D                     l1466:	
  1041                           
  1042                           ;main.c: 213: else if (ADC_H == 54) MAX7219_Transfer(0x02, 5);
  1043  015D  3036               	movlw	54
  1044  015E  067A               	xorwf	_ADC_H,w
  1045  015F  1D03               	btfss	3,2
  1046  0160  2969               	goto	l1470
  1047  0161  3005               	movlw	5
  1048  0162  00F7               	movwf	??_UpdateDisplay
  1049  0163  0877               	movf	??_UpdateDisplay,w
  1050  0164  00F3               	movwf	MAX7219_Transfer@value
  1051  0165  3002               	movlw	2
  1052  0166  3186  2629         	fcall	_MAX7219_Transfer
  1053  0168  0008               	return
  1054  0169                     l1470:	
  1055                           
  1056                           ;main.c: 214: else if (ADC_H == 55) MAX7219_Transfer(0x02, 6);
  1057  0169  3037               	movlw	55
  1058  016A  067A               	xorwf	_ADC_H,w
  1059  016B  1D03               	btfss	3,2
  1060  016C  2975               	goto	l1474
  1061  016D  3006               	movlw	6
  1062  016E  00F7               	movwf	??_UpdateDisplay
  1063  016F  0877               	movf	??_UpdateDisplay,w
  1064  0170  00F3               	movwf	MAX7219_Transfer@value
  1065  0171  3002               	movlw	2
  1066  0172  3186  2629         	fcall	_MAX7219_Transfer
  1067  0174  0008               	return
  1068  0175                     l1474:	
  1069                           
  1070                           ;main.c: 215: else if (ADC_H == 56) MAX7219_Transfer(0x02, 7);
  1071  0175  3038               	movlw	56
  1072  0176  067A               	xorwf	_ADC_H,w
  1073  0177  1D03               	btfss	3,2
  1074  0178  2981               	goto	l1478
  1075  0179  3007               	movlw	7
  1076  017A  00F7               	movwf	??_UpdateDisplay
  1077  017B  0877               	movf	??_UpdateDisplay,w
  1078  017C  00F3               	movwf	MAX7219_Transfer@value
  1079  017D  3002               	movlw	2
  1080  017E  3186  2629         	fcall	_MAX7219_Transfer
  1081  0180  0008               	return
  1082  0181                     l1478:	
  1083                           
  1084                           ;main.c: 216: else if (ADC_H == 57) MAX7219_Transfer(0x02, 8);
  1085  0181  3039               	movlw	57
  1086  0182  067A               	xorwf	_ADC_H,w
  1087  0183  1D03               	btfss	3,2
  1088  0184  298D               	goto	l1482
  1089  0185  3008               	movlw	8
  1090  0186  00F7               	movwf	??_UpdateDisplay
  1091  0187  0877               	movf	??_UpdateDisplay,w
  1092  0188  00F3               	movwf	MAX7219_Transfer@value
  1093  0189  3002               	movlw	2
  1094  018A  3186  2629         	fcall	_MAX7219_Transfer
  1095  018C  0008               	return
  1096  018D                     l1482:	
  1097                           
  1098                           ;main.c: 217: else if (ADC_H == 58) MAX7219_Transfer(0x02, 9);
  1099  018D  303A               	movlw	58
  1100  018E  067A               	xorwf	_ADC_H,w
  1101  018F  1D03               	btfss	3,2
  1102  0190  2999               	goto	l1486
  1103  0191  3009               	movlw	9
  1104  0192  00F7               	movwf	??_UpdateDisplay
  1105  0193  0877               	movf	??_UpdateDisplay,w
  1106  0194  00F3               	movwf	MAX7219_Transfer@value
  1107  0195  3002               	movlw	2
  1108  0196  3186  2629         	fcall	_MAX7219_Transfer
  1109  0198  0008               	return
  1110  0199                     l1486:	
  1111                           
  1112                           ;main.c: 218: else MAX7219_Transfer(0x02, 0);
  1113  0199  01F3               	clrf	MAX7219_Transfer@value
  1114  019A  3002               	movlw	2
  1115  019B  3186  2629         	fcall	_MAX7219_Transfer
  1116                           
  1117                           ;main.c: 219: }
  1118  019D  0008               	return
  1119  019E                     l1488:	
  1120                           
  1121                           ;main.c: 220: else if(ADC_H >= 59 && ADC_H <= 68)
  1122  019E  303B               	movlw	59
  1123  019F  027A               	subwf	_ADC_H,w
  1124  01A0  1C03               	skipc
  1125  01A1  2A1D               	goto	l1532
  1126  01A2  3045               	movlw	69
  1127  01A3  027A               	subwf	_ADC_H,w
  1128  01A4  1803               	skipnc
  1129  01A5  2A1D               	goto	l1532
  1130                           
  1131                           ;main.c: 221: {
  1132                           ;main.c: 222: MAX7219_Transfer(0x01, 3);
  1133  01A6  3003               	movlw	3
  1134  01A7  00F7               	movwf	??_UpdateDisplay
  1135  01A8  0877               	movf	??_UpdateDisplay,w
  1136  01A9  00F3               	movwf	MAX7219_Transfer@value
  1137  01AA  3001               	movlw	1
  1138  01AB  3186  2629  3180   	fcall	_MAX7219_Transfer
  1139                           
  1140                           ;main.c: 225: if(ADC_H == 60) MAX7219_Transfer(0x02, 1);
  1141  01AE  303C               	movlw	60
  1142  01AF  067A               	xorwf	_ADC_H,w
  1143  01B0  1D03               	btfss	3,2
  1144  01B1  29B8               	goto	l1498
  1145  01B2  01F3               	clrf	MAX7219_Transfer@value
  1146  01B3  0AF3               	incf	MAX7219_Transfer@value,f
  1147  01B4  3002               	movlw	2
  1148  01B5  3186  2629         	fcall	_MAX7219_Transfer
  1149  01B7  0008               	return
  1150  01B8                     l1498:	
  1151                           
  1152                           ;main.c: 226: else if (ADC_H == 61) MAX7219_Transfer(0x02, 2);
  1153  01B8  303D               	movlw	61
  1154  01B9  067A               	xorwf	_ADC_H,w
  1155  01BA  1D03               	btfss	3,2
  1156  01BB  29C4               	goto	l1502
  1157  01BC  3002               	movlw	2
  1158  01BD  00F7               	movwf	??_UpdateDisplay
  1159  01BE  0877               	movf	??_UpdateDisplay,w
  1160  01BF  00F3               	movwf	MAX7219_Transfer@value
  1161  01C0  3002               	movlw	2
  1162  01C1  3186  2629         	fcall	_MAX7219_Transfer
  1163  01C3  0008               	return
  1164  01C4                     l1502:	
  1165                           
  1166                           ;main.c: 227: else if (ADC_H == 62) MAX7219_Transfer(0x02, 3);
  1167  01C4  303E               	movlw	62
  1168  01C5  067A               	xorwf	_ADC_H,w
  1169  01C6  1D03               	btfss	3,2
  1170  01C7  29D0               	goto	l1506
  1171  01C8  3003               	movlw	3
  1172  01C9  00F7               	movwf	??_UpdateDisplay
  1173  01CA  0877               	movf	??_UpdateDisplay,w
  1174  01CB  00F3               	movwf	MAX7219_Transfer@value
  1175  01CC  3002               	movlw	2
  1176  01CD  3186  2629         	fcall	_MAX7219_Transfer
  1177  01CF  0008               	return
  1178  01D0                     l1506:	
  1179                           
  1180                           ;main.c: 228: else if (ADC_H == 63) MAX7219_Transfer(0x02, 4);
  1181  01D0  303F               	movlw	63
  1182  01D1  067A               	xorwf	_ADC_H,w
  1183  01D2  1D03               	btfss	3,2
  1184  01D3  29DC               	goto	l1510
  1185  01D4  3004               	movlw	4
  1186  01D5  00F7               	movwf	??_UpdateDisplay
  1187  01D6  0877               	movf	??_UpdateDisplay,w
  1188  01D7  00F3               	movwf	MAX7219_Transfer@value
  1189  01D8  3002               	movlw	2
  1190  01D9  3186  2629         	fcall	_MAX7219_Transfer
  1191  01DB  0008               	return
  1192  01DC                     l1510:	
  1193                           
  1194                           ;main.c: 229: else if (ADC_H == 64) MAX7219_Transfer(0x02, 5);
  1195  01DC  3040               	movlw	64
  1196  01DD  067A               	xorwf	_ADC_H,w
  1197  01DE  1D03               	btfss	3,2
  1198  01DF  29E8               	goto	l1514
  1199  01E0  3005               	movlw	5
  1200  01E1  00F7               	movwf	??_UpdateDisplay
  1201  01E2  0877               	movf	??_UpdateDisplay,w
  1202  01E3  00F3               	movwf	MAX7219_Transfer@value
  1203  01E4  3002               	movlw	2
  1204  01E5  3186  2629         	fcall	_MAX7219_Transfer
  1205  01E7  0008               	return
  1206  01E8                     l1514:	
  1207                           
  1208                           ;main.c: 230: else if (ADC_H == 65) MAX7219_Transfer(0x02, 6);
  1209  01E8  3041               	movlw	65
  1210  01E9  067A               	xorwf	_ADC_H,w
  1211  01EA  1D03               	btfss	3,2
  1212  01EB  29F4               	goto	l1518
  1213  01EC  3006               	movlw	6
  1214  01ED  00F7               	movwf	??_UpdateDisplay
  1215  01EE  0877               	movf	??_UpdateDisplay,w
  1216  01EF  00F3               	movwf	MAX7219_Transfer@value
  1217  01F0  3002               	movlw	2
  1218  01F1  3186  2629         	fcall	_MAX7219_Transfer
  1219  01F3  0008               	return
  1220  01F4                     l1518:	
  1221                           
  1222                           ;main.c: 231: else if (ADC_H == 66) MAX7219_Transfer(0x02, 7);
  1223  01F4  3042               	movlw	66
  1224  01F5  067A               	xorwf	_ADC_H,w
  1225  01F6  1D03               	btfss	3,2
  1226  01F7  2A00               	goto	l1522
  1227  01F8  3007               	movlw	7
  1228  01F9  00F7               	movwf	??_UpdateDisplay
  1229  01FA  0877               	movf	??_UpdateDisplay,w
  1230  01FB  00F3               	movwf	MAX7219_Transfer@value
  1231  01FC  3002               	movlw	2
  1232  01FD  3186  2629         	fcall	_MAX7219_Transfer
  1233  01FF  0008               	return
  1234  0200                     l1522:	
  1235                           
  1236                           ;main.c: 232: else if (ADC_H == 67) MAX7219_Transfer(0x02, 8);
  1237  0200  3043               	movlw	67
  1238  0201  067A               	xorwf	_ADC_H,w
  1239  0202  1D03               	btfss	3,2
  1240  0203  2A0C               	goto	l1526
  1241  0204  3008               	movlw	8
  1242  0205  00F7               	movwf	??_UpdateDisplay
  1243  0206  0877               	movf	??_UpdateDisplay,w
  1244  0207  00F3               	movwf	MAX7219_Transfer@value
  1245  0208  3002               	movlw	2
  1246  0209  3186  2629         	fcall	_MAX7219_Transfer
  1247  020B  0008               	return
  1248  020C                     l1526:	
  1249                           
  1250                           ;main.c: 233: else if (ADC_H == 68) MAX7219_Transfer(0x02, 9);
  1251  020C  3044               	movlw	68
  1252  020D  067A               	xorwf	_ADC_H,w
  1253  020E  1D03               	btfss	3,2
  1254  020F  2A18               	goto	l1530
  1255  0210  3009               	movlw	9
  1256  0211  00F7               	movwf	??_UpdateDisplay
  1257  0212  0877               	movf	??_UpdateDisplay,w
  1258  0213  00F3               	movwf	MAX7219_Transfer@value
  1259  0214  3002               	movlw	2
  1260  0215  3186  2629         	fcall	_MAX7219_Transfer
  1261  0217  0008               	return
  1262  0218                     l1530:	
  1263                           
  1264                           ;main.c: 234: else MAX7219_Transfer(0x02, 0);
  1265  0218  01F3               	clrf	MAX7219_Transfer@value
  1266  0219  3002               	movlw	2
  1267  021A  3186  2629         	fcall	_MAX7219_Transfer
  1268                           
  1269                           ;main.c: 235: }
  1270  021C  0008               	return
  1271  021D                     l1532:	
  1272                           
  1273                           ;main.c: 236: else if(ADC_H >= 69 && ADC_H <= 78)
  1274  021D  3045               	movlw	69
  1275  021E  027A               	subwf	_ADC_H,w
  1276  021F  1C03               	skipc
  1277  0220  2A9C               	goto	l1576
  1278  0221  304F               	movlw	79
  1279  0222  027A               	subwf	_ADC_H,w
  1280  0223  1803               	skipnc
  1281  0224  2A9C               	goto	l1576
  1282                           
  1283                           ;main.c: 237: {
  1284                           ;main.c: 238: MAX7219_Transfer(0x01, 4);
  1285  0225  3004               	movlw	4
  1286  0226  00F7               	movwf	??_UpdateDisplay
  1287  0227  0877               	movf	??_UpdateDisplay,w
  1288  0228  00F3               	movwf	MAX7219_Transfer@value
  1289  0229  3001               	movlw	1
  1290  022A  3186  2629  3180   	fcall	_MAX7219_Transfer
  1291                           
  1292                           ;main.c: 241: if(ADC_H == 70) MAX7219_Transfer(0x02, 1);
  1293  022D  3046               	movlw	70
  1294  022E  067A               	xorwf	_ADC_H,w
  1295  022F  1D03               	btfss	3,2
  1296  0230  2A37               	goto	l1542
  1297  0231  01F3               	clrf	MAX7219_Transfer@value
  1298  0232  0AF3               	incf	MAX7219_Transfer@value,f
  1299  0233  3002               	movlw	2
  1300  0234  3186  2629         	fcall	_MAX7219_Transfer
  1301  0236  0008               	return
  1302  0237                     l1542:	
  1303                           
  1304                           ;main.c: 242: else if (ADC_H == 71) MAX7219_Transfer(0x02, 2);
  1305  0237  3047               	movlw	71
  1306  0238  067A               	xorwf	_ADC_H,w
  1307  0239  1D03               	btfss	3,2
  1308  023A  2A43               	goto	l1546
  1309  023B  3002               	movlw	2
  1310  023C  00F7               	movwf	??_UpdateDisplay
  1311  023D  0877               	movf	??_UpdateDisplay,w
  1312  023E  00F3               	movwf	MAX7219_Transfer@value
  1313  023F  3002               	movlw	2
  1314  0240  3186  2629         	fcall	_MAX7219_Transfer
  1315  0242  0008               	return
  1316  0243                     l1546:	
  1317                           
  1318                           ;main.c: 243: else if (ADC_H == 72) MAX7219_Transfer(0x02, 3);
  1319  0243  3048               	movlw	72
  1320  0244  067A               	xorwf	_ADC_H,w
  1321  0245  1D03               	btfss	3,2
  1322  0246  2A4F               	goto	l1550
  1323  0247  3003               	movlw	3
  1324  0248  00F7               	movwf	??_UpdateDisplay
  1325  0249  0877               	movf	??_UpdateDisplay,w
  1326  024A  00F3               	movwf	MAX7219_Transfer@value
  1327  024B  3002               	movlw	2
  1328  024C  3186  2629         	fcall	_MAX7219_Transfer
  1329  024E  0008               	return
  1330  024F                     l1550:	
  1331                           
  1332                           ;main.c: 244: else if (ADC_H == 73) MAX7219_Transfer(0x02, 4);
  1333  024F  3049               	movlw	73
  1334  0250  067A               	xorwf	_ADC_H,w
  1335  0251  1D03               	btfss	3,2
  1336  0252  2A5B               	goto	l1554
  1337  0253  3004               	movlw	4
  1338  0254  00F7               	movwf	??_UpdateDisplay
  1339  0255  0877               	movf	??_UpdateDisplay,w
  1340  0256  00F3               	movwf	MAX7219_Transfer@value
  1341  0257  3002               	movlw	2
  1342  0258  3186  2629         	fcall	_MAX7219_Transfer
  1343  025A  0008               	return
  1344  025B                     l1554:	
  1345                           
  1346                           ;main.c: 245: else if (ADC_H == 74) MAX7219_Transfer(0x02, 5);
  1347  025B  304A               	movlw	74
  1348  025C  067A               	xorwf	_ADC_H,w
  1349  025D  1D03               	btfss	3,2
  1350  025E  2A67               	goto	l1558
  1351  025F  3005               	movlw	5
  1352  0260  00F7               	movwf	??_UpdateDisplay
  1353  0261  0877               	movf	??_UpdateDisplay,w
  1354  0262  00F3               	movwf	MAX7219_Transfer@value
  1355  0263  3002               	movlw	2
  1356  0264  3186  2629         	fcall	_MAX7219_Transfer
  1357  0266  0008               	return
  1358  0267                     l1558:	
  1359                           
  1360                           ;main.c: 246: else if (ADC_H == 75) MAX7219_Transfer(0x02, 6);
  1361  0267  304B               	movlw	75
  1362  0268  067A               	xorwf	_ADC_H,w
  1363  0269  1D03               	btfss	3,2
  1364  026A  2A73               	goto	l1562
  1365  026B  3006               	movlw	6
  1366  026C  00F7               	movwf	??_UpdateDisplay
  1367  026D  0877               	movf	??_UpdateDisplay,w
  1368  026E  00F3               	movwf	MAX7219_Transfer@value
  1369  026F  3002               	movlw	2
  1370  0270  3186  2629         	fcall	_MAX7219_Transfer
  1371  0272  0008               	return
  1372  0273                     l1562:	
  1373                           
  1374                           ;main.c: 247: else if (ADC_H == 76) MAX7219_Transfer(0x02, 7);
  1375  0273  304C               	movlw	76
  1376  0274  067A               	xorwf	_ADC_H,w
  1377  0275  1D03               	btfss	3,2
  1378  0276  2A7F               	goto	l1566
  1379  0277  3007               	movlw	7
  1380  0278  00F7               	movwf	??_UpdateDisplay
  1381  0279  0877               	movf	??_UpdateDisplay,w
  1382  027A  00F3               	movwf	MAX7219_Transfer@value
  1383  027B  3002               	movlw	2
  1384  027C  3186  2629         	fcall	_MAX7219_Transfer
  1385  027E  0008               	return
  1386  027F                     l1566:	
  1387                           
  1388                           ;main.c: 248: else if (ADC_H == 77) MAX7219_Transfer(0x02, 8);
  1389  027F  304D               	movlw	77
  1390  0280  067A               	xorwf	_ADC_H,w
  1391  0281  1D03               	btfss	3,2
  1392  0282  2A8B               	goto	l1570
  1393  0283  3008               	movlw	8
  1394  0284  00F7               	movwf	??_UpdateDisplay
  1395  0285  0877               	movf	??_UpdateDisplay,w
  1396  0286  00F3               	movwf	MAX7219_Transfer@value
  1397  0287  3002               	movlw	2
  1398  0288  3186  2629         	fcall	_MAX7219_Transfer
  1399  028A  0008               	return
  1400  028B                     l1570:	
  1401                           
  1402                           ;main.c: 249: else if (ADC_H == 78) MAX7219_Transfer(0x02, 9);
  1403  028B  304E               	movlw	78
  1404  028C  067A               	xorwf	_ADC_H,w
  1405  028D  1D03               	btfss	3,2
  1406  028E  2A97               	goto	l1574
  1407  028F  3009               	movlw	9
  1408  0290  00F7               	movwf	??_UpdateDisplay
  1409  0291  0877               	movf	??_UpdateDisplay,w
  1410  0292  00F3               	movwf	MAX7219_Transfer@value
  1411  0293  3002               	movlw	2
  1412  0294  3186  2629         	fcall	_MAX7219_Transfer
  1413  0296  0008               	return
  1414  0297                     l1574:	
  1415                           
  1416                           ;main.c: 250: else MAX7219_Transfer(0x02, 0);
  1417  0297  01F3               	clrf	MAX7219_Transfer@value
  1418  0298  3002               	movlw	2
  1419  0299  3186  2629         	fcall	_MAX7219_Transfer
  1420                           
  1421                           ;main.c: 251: }
  1422  029B  0008               	return
  1423  029C                     l1576:	
  1424                           
  1425                           ;main.c: 252: else if(ADC_H >= 79 && ADC_H <= 88)
  1426  029C  304F               	movlw	79
  1427  029D  027A               	subwf	_ADC_H,w
  1428  029E  1C03               	skipc
  1429  029F  2B1B               	goto	l1620
  1430  02A0  3059               	movlw	89
  1431  02A1  027A               	subwf	_ADC_H,w
  1432  02A2  1803               	skipnc
  1433  02A3  2B1B               	goto	l1620
  1434                           
  1435                           ;main.c: 253: {
  1436                           ;main.c: 254: MAX7219_Transfer(0x01, 5);
  1437  02A4  3005               	movlw	5
  1438  02A5  00F7               	movwf	??_UpdateDisplay
  1439  02A6  0877               	movf	??_UpdateDisplay,w
  1440  02A7  00F3               	movwf	MAX7219_Transfer@value
  1441  02A8  3001               	movlw	1
  1442  02A9  3186  2629  3180   	fcall	_MAX7219_Transfer
  1443                           
  1444                           ;main.c: 257: if(ADC_H == 80) MAX7219_Transfer(0x02, 1);
  1445  02AC  3050               	movlw	80
  1446  02AD  067A               	xorwf	_ADC_H,w
  1447  02AE  1D03               	btfss	3,2
  1448  02AF  2AB6               	goto	l1586
  1449  02B0  01F3               	clrf	MAX7219_Transfer@value
  1450  02B1  0AF3               	incf	MAX7219_Transfer@value,f
  1451  02B2  3002               	movlw	2
  1452  02B3  3186  2629         	fcall	_MAX7219_Transfer
  1453  02B5  0008               	return
  1454  02B6                     l1586:	
  1455                           
  1456                           ;main.c: 258: else if (ADC_H == 81) MAX7219_Transfer(0x02, 2);
  1457  02B6  3051               	movlw	81
  1458  02B7  067A               	xorwf	_ADC_H,w
  1459  02B8  1D03               	btfss	3,2
  1460  02B9  2AC2               	goto	l1590
  1461  02BA  3002               	movlw	2
  1462  02BB  00F7               	movwf	??_UpdateDisplay
  1463  02BC  0877               	movf	??_UpdateDisplay,w
  1464  02BD  00F3               	movwf	MAX7219_Transfer@value
  1465  02BE  3002               	movlw	2
  1466  02BF  3186  2629         	fcall	_MAX7219_Transfer
  1467  02C1  0008               	return
  1468  02C2                     l1590:	
  1469                           
  1470                           ;main.c: 259: else if (ADC_H == 82) MAX7219_Transfer(0x02, 3);
  1471  02C2  3052               	movlw	82
  1472  02C3  067A               	xorwf	_ADC_H,w
  1473  02C4  1D03               	btfss	3,2
  1474  02C5  2ACE               	goto	l1594
  1475  02C6  3003               	movlw	3
  1476  02C7  00F7               	movwf	??_UpdateDisplay
  1477  02C8  0877               	movf	??_UpdateDisplay,w
  1478  02C9  00F3               	movwf	MAX7219_Transfer@value
  1479  02CA  3002               	movlw	2
  1480  02CB  3186  2629         	fcall	_MAX7219_Transfer
  1481  02CD  0008               	return
  1482  02CE                     l1594:	
  1483                           
  1484                           ;main.c: 260: else if (ADC_H == 83) MAX7219_Transfer(0x02, 4);
  1485  02CE  3053               	movlw	83
  1486  02CF  067A               	xorwf	_ADC_H,w
  1487  02D0  1D03               	btfss	3,2
  1488  02D1  2ADA               	goto	l1598
  1489  02D2  3004               	movlw	4
  1490  02D3  00F7               	movwf	??_UpdateDisplay
  1491  02D4  0877               	movf	??_UpdateDisplay,w
  1492  02D5  00F3               	movwf	MAX7219_Transfer@value
  1493  02D6  3002               	movlw	2
  1494  02D7  3186  2629         	fcall	_MAX7219_Transfer
  1495  02D9  0008               	return
  1496  02DA                     l1598:	
  1497                           
  1498                           ;main.c: 261: else if (ADC_H == 84) MAX7219_Transfer(0x02, 5);
  1499  02DA  3054               	movlw	84
  1500  02DB  067A               	xorwf	_ADC_H,w
  1501  02DC  1D03               	btfss	3,2
  1502  02DD  2AE6               	goto	l1602
  1503  02DE  3005               	movlw	5
  1504  02DF  00F7               	movwf	??_UpdateDisplay
  1505  02E0  0877               	movf	??_UpdateDisplay,w
  1506  02E1  00F3               	movwf	MAX7219_Transfer@value
  1507  02E2  3002               	movlw	2
  1508  02E3  3186  2629         	fcall	_MAX7219_Transfer
  1509  02E5  0008               	return
  1510  02E6                     l1602:	
  1511                           
  1512                           ;main.c: 262: else if (ADC_H == 85) MAX7219_Transfer(0x02, 6);
  1513  02E6  3055               	movlw	85
  1514  02E7  067A               	xorwf	_ADC_H,w
  1515  02E8  1D03               	btfss	3,2
  1516  02E9  2AF2               	goto	l1606
  1517  02EA  3006               	movlw	6
  1518  02EB  00F7               	movwf	??_UpdateDisplay
  1519  02EC  0877               	movf	??_UpdateDisplay,w
  1520  02ED  00F3               	movwf	MAX7219_Transfer@value
  1521  02EE  3002               	movlw	2
  1522  02EF  3186  2629         	fcall	_MAX7219_Transfer
  1523  02F1  0008               	return
  1524  02F2                     l1606:	
  1525                           
  1526                           ;main.c: 263: else if (ADC_H == 86) MAX7219_Transfer(0x02, 7);
  1527  02F2  3056               	movlw	86
  1528  02F3  067A               	xorwf	_ADC_H,w
  1529  02F4  1D03               	btfss	3,2
  1530  02F5  2AFE               	goto	l1610
  1531  02F6  3007               	movlw	7
  1532  02F7  00F7               	movwf	??_UpdateDisplay
  1533  02F8  0877               	movf	??_UpdateDisplay,w
  1534  02F9  00F3               	movwf	MAX7219_Transfer@value
  1535  02FA  3002               	movlw	2
  1536  02FB  3186  2629         	fcall	_MAX7219_Transfer
  1537  02FD  0008               	return
  1538  02FE                     l1610:	
  1539                           
  1540                           ;main.c: 264: else if (ADC_H == 87) MAX7219_Transfer(0x02, 8);
  1541  02FE  3057               	movlw	87
  1542  02FF  067A               	xorwf	_ADC_H,w
  1543  0300  1D03               	btfss	3,2
  1544  0301  2B0A               	goto	l1614
  1545  0302  3008               	movlw	8
  1546  0303  00F7               	movwf	??_UpdateDisplay
  1547  0304  0877               	movf	??_UpdateDisplay,w
  1548  0305  00F3               	movwf	MAX7219_Transfer@value
  1549  0306  3002               	movlw	2
  1550  0307  3186  2629         	fcall	_MAX7219_Transfer
  1551  0309  0008               	return
  1552  030A                     l1614:	
  1553                           
  1554                           ;main.c: 265: else if (ADC_H == 88) MAX7219_Transfer(0x02, 9);
  1555  030A  3058               	movlw	88
  1556  030B  067A               	xorwf	_ADC_H,w
  1557  030C  1D03               	btfss	3,2
  1558  030D  2B16               	goto	l1618
  1559  030E  3009               	movlw	9
  1560  030F  00F7               	movwf	??_UpdateDisplay
  1561  0310  0877               	movf	??_UpdateDisplay,w
  1562  0311  00F3               	movwf	MAX7219_Transfer@value
  1563  0312  3002               	movlw	2
  1564  0313  3186  2629         	fcall	_MAX7219_Transfer
  1565  0315  0008               	return
  1566  0316                     l1618:	
  1567                           
  1568                           ;main.c: 266: else MAX7219_Transfer(0x02, 0);
  1569  0316  01F3               	clrf	MAX7219_Transfer@value
  1570  0317  3002               	movlw	2
  1571  0318  3186  2629         	fcall	_MAX7219_Transfer
  1572                           
  1573                           ;main.c: 267: }
  1574  031A  0008               	return
  1575  031B                     l1620:	
  1576                           
  1577                           ;main.c: 268: else if(ADC_H >= 89 && ADC_H <= 98)
  1578  031B  3059               	movlw	89
  1579  031C  027A               	subwf	_ADC_H,w
  1580  031D  1C03               	skipc
  1581  031E  2B9A               	goto	l1664
  1582  031F  3063               	movlw	99
  1583  0320  027A               	subwf	_ADC_H,w
  1584  0321  1803               	skipnc
  1585  0322  2B9A               	goto	l1664
  1586                           
  1587                           ;main.c: 269: {
  1588                           ;main.c: 270: MAX7219_Transfer(0x01, 6);
  1589  0323  3006               	movlw	6
  1590  0324  00F7               	movwf	??_UpdateDisplay
  1591  0325  0877               	movf	??_UpdateDisplay,w
  1592  0326  00F3               	movwf	MAX7219_Transfer@value
  1593  0327  3001               	movlw	1
  1594  0328  3186  2629  3180   	fcall	_MAX7219_Transfer
  1595                           
  1596                           ;main.c: 273: if(ADC_H == 90) MAX7219_Transfer(0x02, 1);
  1597  032B  305A               	movlw	90
  1598  032C  067A               	xorwf	_ADC_H,w
  1599  032D  1D03               	btfss	3,2
  1600  032E  2B35               	goto	l1630
  1601  032F  01F3               	clrf	MAX7219_Transfer@value
  1602  0330  0AF3               	incf	MAX7219_Transfer@value,f
  1603  0331  3002               	movlw	2
  1604  0332  3186  2629         	fcall	_MAX7219_Transfer
  1605  0334  0008               	return
  1606  0335                     l1630:	
  1607                           
  1608                           ;main.c: 274: else if (ADC_H == 91) MAX7219_Transfer(0x02, 2);
  1609  0335  305B               	movlw	91
  1610  0336  067A               	xorwf	_ADC_H,w
  1611  0337  1D03               	btfss	3,2
  1612  0338  2B41               	goto	l1634
  1613  0339  3002               	movlw	2
  1614  033A  00F7               	movwf	??_UpdateDisplay
  1615  033B  0877               	movf	??_UpdateDisplay,w
  1616  033C  00F3               	movwf	MAX7219_Transfer@value
  1617  033D  3002               	movlw	2
  1618  033E  3186  2629         	fcall	_MAX7219_Transfer
  1619  0340  0008               	return
  1620  0341                     l1634:	
  1621                           
  1622                           ;main.c: 275: else if (ADC_H == 92) MAX7219_Transfer(0x02, 3);
  1623  0341  305C               	movlw	92
  1624  0342  067A               	xorwf	_ADC_H,w
  1625  0343  1D03               	btfss	3,2
  1626  0344  2B4D               	goto	l1638
  1627  0345  3003               	movlw	3
  1628  0346  00F7               	movwf	??_UpdateDisplay
  1629  0347  0877               	movf	??_UpdateDisplay,w
  1630  0348  00F3               	movwf	MAX7219_Transfer@value
  1631  0349  3002               	movlw	2
  1632  034A  3186  2629         	fcall	_MAX7219_Transfer
  1633  034C  0008               	return
  1634  034D                     l1638:	
  1635                           
  1636                           ;main.c: 276: else if (ADC_H == 93) MAX7219_Transfer(0x02, 4);
  1637  034D  305D               	movlw	93
  1638  034E  067A               	xorwf	_ADC_H,w
  1639  034F  1D03               	btfss	3,2
  1640  0350  2B59               	goto	l1642
  1641  0351  3004               	movlw	4
  1642  0352  00F7               	movwf	??_UpdateDisplay
  1643  0353  0877               	movf	??_UpdateDisplay,w
  1644  0354  00F3               	movwf	MAX7219_Transfer@value
  1645  0355  3002               	movlw	2
  1646  0356  3186  2629         	fcall	_MAX7219_Transfer
  1647  0358  0008               	return
  1648  0359                     l1642:	
  1649                           
  1650                           ;main.c: 277: else if (ADC_H == 94) MAX7219_Transfer(0x02, 5);
  1651  0359  305E               	movlw	94
  1652  035A  067A               	xorwf	_ADC_H,w
  1653  035B  1D03               	btfss	3,2
  1654  035C  2B65               	goto	l1646
  1655  035D  3005               	movlw	5
  1656  035E  00F7               	movwf	??_UpdateDisplay
  1657  035F  0877               	movf	??_UpdateDisplay,w
  1658  0360  00F3               	movwf	MAX7219_Transfer@value
  1659  0361  3002               	movlw	2
  1660  0362  3186  2629         	fcall	_MAX7219_Transfer
  1661  0364  0008               	return
  1662  0365                     l1646:	
  1663                           
  1664                           ;main.c: 278: else if (ADC_H == 95) MAX7219_Transfer(0x02, 6);
  1665  0365  305F               	movlw	95
  1666  0366  067A               	xorwf	_ADC_H,w
  1667  0367  1D03               	btfss	3,2
  1668  0368  2B71               	goto	l1650
  1669  0369  3006               	movlw	6
  1670  036A  00F7               	movwf	??_UpdateDisplay
  1671  036B  0877               	movf	??_UpdateDisplay,w
  1672  036C  00F3               	movwf	MAX7219_Transfer@value
  1673  036D  3002               	movlw	2
  1674  036E  3186  2629         	fcall	_MAX7219_Transfer
  1675  0370  0008               	return
  1676  0371                     l1650:	
  1677                           
  1678                           ;main.c: 279: else if (ADC_H == 96) MAX7219_Transfer(0x02, 7);
  1679  0371  3060               	movlw	96
  1680  0372  067A               	xorwf	_ADC_H,w
  1681  0373  1D03               	btfss	3,2
  1682  0374  2B7D               	goto	l1654
  1683  0375  3007               	movlw	7
  1684  0376  00F7               	movwf	??_UpdateDisplay
  1685  0377  0877               	movf	??_UpdateDisplay,w
  1686  0378  00F3               	movwf	MAX7219_Transfer@value
  1687  0379  3002               	movlw	2
  1688  037A  3186  2629         	fcall	_MAX7219_Transfer
  1689  037C  0008               	return
  1690  037D                     l1654:	
  1691                           
  1692                           ;main.c: 280: else if (ADC_H == 97) MAX7219_Transfer(0x02, 8);
  1693  037D  3061               	movlw	97
  1694  037E  067A               	xorwf	_ADC_H,w
  1695  037F  1D03               	btfss	3,2
  1696  0380  2B89               	goto	l1658
  1697  0381  3008               	movlw	8
  1698  0382  00F7               	movwf	??_UpdateDisplay
  1699  0383  0877               	movf	??_UpdateDisplay,w
  1700  0384  00F3               	movwf	MAX7219_Transfer@value
  1701  0385  3002               	movlw	2
  1702  0386  3186  2629         	fcall	_MAX7219_Transfer
  1703  0388  0008               	return
  1704  0389                     l1658:	
  1705                           
  1706                           ;main.c: 281: else if (ADC_H == 98) MAX7219_Transfer(0x02, 9);
  1707  0389  3062               	movlw	98
  1708  038A  067A               	xorwf	_ADC_H,w
  1709  038B  1D03               	btfss	3,2
  1710  038C  2B95               	goto	l1662
  1711  038D  3009               	movlw	9
  1712  038E  00F7               	movwf	??_UpdateDisplay
  1713  038F  0877               	movf	??_UpdateDisplay,w
  1714  0390  00F3               	movwf	MAX7219_Transfer@value
  1715  0391  3002               	movlw	2
  1716  0392  3186  2629         	fcall	_MAX7219_Transfer
  1717  0394  0008               	return
  1718  0395                     l1662:	
  1719                           
  1720                           ;main.c: 282: else MAX7219_Transfer(0x02, 0);
  1721  0395  01F3               	clrf	MAX7219_Transfer@value
  1722  0396  3002               	movlw	2
  1723  0397  3186  2629         	fcall	_MAX7219_Transfer
  1724                           
  1725                           ;main.c: 283: }
  1726  0399  0008               	return
  1727  039A                     l1664:	
  1728                           
  1729                           ;main.c: 284: else if(ADC_H >= 99 && ADC_H <= 108)
  1730  039A  3063               	movlw	99
  1731  039B  027A               	subwf	_ADC_H,w
  1732  039C  1C03               	skipc
  1733  039D  2C19               	goto	l1708
  1734  039E  306D               	movlw	109
  1735  039F  027A               	subwf	_ADC_H,w
  1736  03A0  1803               	skipnc
  1737  03A1  2C19               	goto	l1708
  1738                           
  1739                           ;main.c: 285: {
  1740                           ;main.c: 286: MAX7219_Transfer(0x01, 7);
  1741  03A2  3007               	movlw	7
  1742  03A3  00F7               	movwf	??_UpdateDisplay
  1743  03A4  0877               	movf	??_UpdateDisplay,w
  1744  03A5  00F3               	movwf	MAX7219_Transfer@value
  1745  03A6  3001               	movlw	1
  1746  03A7  3186  2629  3180   	fcall	_MAX7219_Transfer
  1747                           
  1748                           ;main.c: 289: if(ADC_H == 100) MAX7219_Transfer(0x02, 1);
  1749  03AA  3064               	movlw	100
  1750  03AB  067A               	xorwf	_ADC_H,w
  1751  03AC  1D03               	btfss	3,2
  1752  03AD  2BB4               	goto	l1674
  1753  03AE  01F3               	clrf	MAX7219_Transfer@value
  1754  03AF  0AF3               	incf	MAX7219_Transfer@value,f
  1755  03B0  3002               	movlw	2
  1756  03B1  3186  2629         	fcall	_MAX7219_Transfer
  1757  03B3  0008               	return
  1758  03B4                     l1674:	
  1759                           
  1760                           ;main.c: 290: else if (ADC_H == 101) MAX7219_Transfer(0x02, 2);
  1761  03B4  3065               	movlw	101
  1762  03B5  067A               	xorwf	_ADC_H,w
  1763  03B6  1D03               	btfss	3,2
  1764  03B7  2BC0               	goto	l1678
  1765  03B8  3002               	movlw	2
  1766  03B9  00F7               	movwf	??_UpdateDisplay
  1767  03BA  0877               	movf	??_UpdateDisplay,w
  1768  03BB  00F3               	movwf	MAX7219_Transfer@value
  1769  03BC  3002               	movlw	2
  1770  03BD  3186  2629         	fcall	_MAX7219_Transfer
  1771  03BF  0008               	return
  1772  03C0                     l1678:	
  1773                           
  1774                           ;main.c: 291: else if (ADC_H == 102) MAX7219_Transfer(0x02, 3);
  1775  03C0  3066               	movlw	102
  1776  03C1  067A               	xorwf	_ADC_H,w
  1777  03C2  1D03               	btfss	3,2
  1778  03C3  2BCC               	goto	l1682
  1779  03C4  3003               	movlw	3
  1780  03C5  00F7               	movwf	??_UpdateDisplay
  1781  03C6  0877               	movf	??_UpdateDisplay,w
  1782  03C7  00F3               	movwf	MAX7219_Transfer@value
  1783  03C8  3002               	movlw	2
  1784  03C9  3186  2629         	fcall	_MAX7219_Transfer
  1785  03CB  0008               	return
  1786  03CC                     l1682:	
  1787                           
  1788                           ;main.c: 292: else if (ADC_H == 103) MAX7219_Transfer(0x02, 4);
  1789  03CC  3067               	movlw	103
  1790  03CD  067A               	xorwf	_ADC_H,w
  1791  03CE  1D03               	btfss	3,2
  1792  03CF  2BD8               	goto	l1686
  1793  03D0  3004               	movlw	4
  1794  03D1  00F7               	movwf	??_UpdateDisplay
  1795  03D2  0877               	movf	??_UpdateDisplay,w
  1796  03D3  00F3               	movwf	MAX7219_Transfer@value
  1797  03D4  3002               	movlw	2
  1798  03D5  3186  2629         	fcall	_MAX7219_Transfer
  1799  03D7  0008               	return
  1800  03D8                     l1686:	
  1801                           
  1802                           ;main.c: 293: else if (ADC_H == 104) MAX7219_Transfer(0x02, 5);
  1803  03D8  3068               	movlw	104
  1804  03D9  067A               	xorwf	_ADC_H,w
  1805  03DA  1D03               	btfss	3,2
  1806  03DB  2BE4               	goto	l1690
  1807  03DC  3005               	movlw	5
  1808  03DD  00F7               	movwf	??_UpdateDisplay
  1809  03DE  0877               	movf	??_UpdateDisplay,w
  1810  03DF  00F3               	movwf	MAX7219_Transfer@value
  1811  03E0  3002               	movlw	2
  1812  03E1  3186  2629         	fcall	_MAX7219_Transfer
  1813  03E3  0008               	return
  1814  03E4                     l1690:	
  1815                           
  1816                           ;main.c: 294: else if (ADC_H == 105) MAX7219_Transfer(0x02, 6);
  1817  03E4  3069               	movlw	105
  1818  03E5  067A               	xorwf	_ADC_H,w
  1819  03E6  1D03               	btfss	3,2
  1820  03E7  2BF0               	goto	l1694
  1821  03E8  3006               	movlw	6
  1822  03E9  00F7               	movwf	??_UpdateDisplay
  1823  03EA  0877               	movf	??_UpdateDisplay,w
  1824  03EB  00F3               	movwf	MAX7219_Transfer@value
  1825  03EC  3002               	movlw	2
  1826  03ED  3186  2629         	fcall	_MAX7219_Transfer
  1827  03EF  0008               	return
  1828  03F0                     l1694:	
  1829                           
  1830                           ;main.c: 295: else if (ADC_H == 106) MAX7219_Transfer(0x02, 7);
  1831  03F0  306A               	movlw	106
  1832  03F1  067A               	xorwf	_ADC_H,w
  1833  03F2  1D03               	btfss	3,2
  1834  03F3  2BFC               	goto	l1698
  1835  03F4  3007               	movlw	7
  1836  03F5  00F7               	movwf	??_UpdateDisplay
  1837  03F6  0877               	movf	??_UpdateDisplay,w
  1838  03F7  00F3               	movwf	MAX7219_Transfer@value
  1839  03F8  3002               	movlw	2
  1840  03F9  3186  2629         	fcall	_MAX7219_Transfer
  1841  03FB  0008               	return
  1842  03FC                     l1698:	
  1843                           
  1844                           ;main.c: 296: else if (ADC_H == 107) MAX7219_Transfer(0x02, 8);
  1845  03FC  306B               	movlw	107
  1846  03FD  067A               	xorwf	_ADC_H,w
  1847  03FE  1D03               	btfss	3,2
  1848  03FF  2C08               	goto	l1702
  1849  0400  3008               	movlw	8
  1850  0401  00F7               	movwf	??_UpdateDisplay
  1851  0402  0877               	movf	??_UpdateDisplay,w
  1852  0403  00F3               	movwf	MAX7219_Transfer@value
  1853  0404  3002               	movlw	2
  1854  0405  3186  2629         	fcall	_MAX7219_Transfer
  1855  0407  0008               	return
  1856  0408                     l1702:	
  1857                           
  1858                           ;main.c: 297: else if (ADC_H == 108) MAX7219_Transfer(0x02, 9);
  1859  0408  306C               	movlw	108
  1860  0409  067A               	xorwf	_ADC_H,w
  1861  040A  1D03               	btfss	3,2
  1862  040B  2C14               	goto	l1706
  1863  040C  3009               	movlw	9
  1864  040D  00F7               	movwf	??_UpdateDisplay
  1865  040E  0877               	movf	??_UpdateDisplay,w
  1866  040F  00F3               	movwf	MAX7219_Transfer@value
  1867  0410  3002               	movlw	2
  1868  0411  3186  2629         	fcall	_MAX7219_Transfer
  1869  0413  0008               	return
  1870  0414                     l1706:	
  1871                           
  1872                           ;main.c: 298: else MAX7219_Transfer(0x02, 0);
  1873  0414  01F3               	clrf	MAX7219_Transfer@value
  1874  0415  3002               	movlw	2
  1875  0416  3186  2629         	fcall	_MAX7219_Transfer
  1876                           
  1877                           ;main.c: 299: }
  1878  0418  0008               	return
  1879  0419                     l1708:	
  1880                           
  1881                           ;main.c: 300: else if(ADC_H >= 109 && ADC_H <= 118)
  1882  0419  306D               	movlw	109
  1883  041A  027A               	subwf	_ADC_H,w
  1884  041B  1C03               	skipc
  1885  041C  2C98               	goto	l1752
  1886  041D  3077               	movlw	119
  1887  041E  027A               	subwf	_ADC_H,w
  1888  041F  1803               	skipnc
  1889  0420  2C98               	goto	l1752
  1890                           
  1891                           ;main.c: 301: {
  1892                           ;main.c: 302: MAX7219_Transfer(0x01, 8);
  1893  0421  3008               	movlw	8
  1894  0422  00F7               	movwf	??_UpdateDisplay
  1895  0423  0877               	movf	??_UpdateDisplay,w
  1896  0424  00F3               	movwf	MAX7219_Transfer@value
  1897  0425  3001               	movlw	1
  1898  0426  3186  2629  3180   	fcall	_MAX7219_Transfer
  1899                           
  1900                           ;main.c: 305: if(ADC_H == 110) MAX7219_Transfer(0x02, 1);
  1901  0429  306E               	movlw	110
  1902  042A  067A               	xorwf	_ADC_H,w
  1903  042B  1D03               	btfss	3,2
  1904  042C  2C33               	goto	l1718
  1905  042D  01F3               	clrf	MAX7219_Transfer@value
  1906  042E  0AF3               	incf	MAX7219_Transfer@value,f
  1907  042F  3002               	movlw	2
  1908  0430  3186  2629         	fcall	_MAX7219_Transfer
  1909  0432  0008               	return
  1910  0433                     l1718:	
  1911                           
  1912                           ;main.c: 306: else if (ADC_H == 111) MAX7219_Transfer(0x02, 2);
  1913  0433  306F               	movlw	111
  1914  0434  067A               	xorwf	_ADC_H,w
  1915  0435  1D03               	btfss	3,2
  1916  0436  2C3F               	goto	l1722
  1917  0437  3002               	movlw	2
  1918  0438  00F7               	movwf	??_UpdateDisplay
  1919  0439  0877               	movf	??_UpdateDisplay,w
  1920  043A  00F3               	movwf	MAX7219_Transfer@value
  1921  043B  3002               	movlw	2
  1922  043C  3186  2629         	fcall	_MAX7219_Transfer
  1923  043E  0008               	return
  1924  043F                     l1722:	
  1925                           
  1926                           ;main.c: 307: else if (ADC_H == 112) MAX7219_Transfer(0x02, 3);
  1927  043F  3070               	movlw	112
  1928  0440  067A               	xorwf	_ADC_H,w
  1929  0441  1D03               	btfss	3,2
  1930  0442  2C4B               	goto	l1726
  1931  0443  3003               	movlw	3
  1932  0444  00F7               	movwf	??_UpdateDisplay
  1933  0445  0877               	movf	??_UpdateDisplay,w
  1934  0446  00F3               	movwf	MAX7219_Transfer@value
  1935  0447  3002               	movlw	2
  1936  0448  3186  2629         	fcall	_MAX7219_Transfer
  1937  044A  0008               	return
  1938  044B                     l1726:	
  1939                           
  1940                           ;main.c: 308: else if (ADC_H == 113) MAX7219_Transfer(0x02, 4);
  1941  044B  3071               	movlw	113
  1942  044C  067A               	xorwf	_ADC_H,w
  1943  044D  1D03               	btfss	3,2
  1944  044E  2C57               	goto	l1730
  1945  044F  3004               	movlw	4
  1946  0450  00F7               	movwf	??_UpdateDisplay
  1947  0451  0877               	movf	??_UpdateDisplay,w
  1948  0452  00F3               	movwf	MAX7219_Transfer@value
  1949  0453  3002               	movlw	2
  1950  0454  3186  2629         	fcall	_MAX7219_Transfer
  1951  0456  0008               	return
  1952  0457                     l1730:	
  1953                           
  1954                           ;main.c: 309: else if (ADC_H == 114) MAX7219_Transfer(0x02, 5);
  1955  0457  3072               	movlw	114
  1956  0458  067A               	xorwf	_ADC_H,w
  1957  0459  1D03               	btfss	3,2
  1958  045A  2C63               	goto	l1734
  1959  045B  3005               	movlw	5
  1960  045C  00F7               	movwf	??_UpdateDisplay
  1961  045D  0877               	movf	??_UpdateDisplay,w
  1962  045E  00F3               	movwf	MAX7219_Transfer@value
  1963  045F  3002               	movlw	2
  1964  0460  3186  2629         	fcall	_MAX7219_Transfer
  1965  0462  0008               	return
  1966  0463                     l1734:	
  1967                           
  1968                           ;main.c: 310: else if (ADC_H == 115) MAX7219_Transfer(0x02, 6);
  1969  0463  3073               	movlw	115
  1970  0464  067A               	xorwf	_ADC_H,w
  1971  0465  1D03               	btfss	3,2
  1972  0466  2C6F               	goto	l1738
  1973  0467  3006               	movlw	6
  1974  0468  00F7               	movwf	??_UpdateDisplay
  1975  0469  0877               	movf	??_UpdateDisplay,w
  1976  046A  00F3               	movwf	MAX7219_Transfer@value
  1977  046B  3002               	movlw	2
  1978  046C  3186  2629         	fcall	_MAX7219_Transfer
  1979  046E  0008               	return
  1980  046F                     l1738:	
  1981                           
  1982                           ;main.c: 311: else if (ADC_H == 116) MAX7219_Transfer(0x02, 7);
  1983  046F  3074               	movlw	116
  1984  0470  067A               	xorwf	_ADC_H,w
  1985  0471  1D03               	btfss	3,2
  1986  0472  2C7B               	goto	l1742
  1987  0473  3007               	movlw	7
  1988  0474  00F7               	movwf	??_UpdateDisplay
  1989  0475  0877               	movf	??_UpdateDisplay,w
  1990  0476  00F3               	movwf	MAX7219_Transfer@value
  1991  0477  3002               	movlw	2
  1992  0478  3186  2629         	fcall	_MAX7219_Transfer
  1993  047A  0008               	return
  1994  047B                     l1742:	
  1995                           
  1996                           ;main.c: 312: else if (ADC_H == 117) MAX7219_Transfer(0x02, 8);
  1997  047B  3075               	movlw	117
  1998  047C  067A               	xorwf	_ADC_H,w
  1999  047D  1D03               	btfss	3,2
  2000  047E  2C87               	goto	l1746
  2001  047F  3008               	movlw	8
  2002  0480  00F7               	movwf	??_UpdateDisplay
  2003  0481  0877               	movf	??_UpdateDisplay,w
  2004  0482  00F3               	movwf	MAX7219_Transfer@value
  2005  0483  3002               	movlw	2
  2006  0484  3186  2629         	fcall	_MAX7219_Transfer
  2007  0486  0008               	return
  2008  0487                     l1746:	
  2009                           
  2010                           ;main.c: 313: else if (ADC_H == 118) MAX7219_Transfer(0x02, 9);
  2011  0487  3076               	movlw	118
  2012  0488  067A               	xorwf	_ADC_H,w
  2013  0489  1D03               	btfss	3,2
  2014  048A  2C93               	goto	l1750
  2015  048B  3009               	movlw	9
  2016  048C  00F7               	movwf	??_UpdateDisplay
  2017  048D  0877               	movf	??_UpdateDisplay,w
  2018  048E  00F3               	movwf	MAX7219_Transfer@value
  2019  048F  3002               	movlw	2
  2020  0490  3186  2629         	fcall	_MAX7219_Transfer
  2021  0492  0008               	return
  2022  0493                     l1750:	
  2023                           
  2024                           ;main.c: 314: else MAX7219_Transfer(0x02, 0);
  2025  0493  01F3               	clrf	MAX7219_Transfer@value
  2026  0494  3002               	movlw	2
  2027  0495  3186  2629         	fcall	_MAX7219_Transfer
  2028                           
  2029                           ;main.c: 315: }
  2030  0497  0008               	return
  2031  0498                     l1752:	
  2032                           
  2033                           ;main.c: 316: else if(ADC_H >= 119 && ADC_H <= 128)
  2034  0498  3077               	movlw	119
  2035  0499  027A               	subwf	_ADC_H,w
  2036  049A  1C03               	skipc
  2037  049B  2D17               	goto	l1796
  2038  049C  3081               	movlw	129
  2039  049D  027A               	subwf	_ADC_H,w
  2040  049E  1803               	skipnc
  2041  049F  2D17               	goto	l1796
  2042                           
  2043                           ;main.c: 317: {
  2044                           ;main.c: 318: MAX7219_Transfer(0x01, 8);
  2045  04A0  3008               	movlw	8
  2046  04A1  00F7               	movwf	??_UpdateDisplay
  2047  04A2  0877               	movf	??_UpdateDisplay,w
  2048  04A3  00F3               	movwf	MAX7219_Transfer@value
  2049  04A4  3001               	movlw	1
  2050  04A5  3186  2629  3180   	fcall	_MAX7219_Transfer
  2051                           
  2052                           ;main.c: 321: if(ADC_H == 120) MAX7219_Transfer(0x02, 1);
  2053  04A8  3078               	movlw	120
  2054  04A9  067A               	xorwf	_ADC_H,w
  2055  04AA  1D03               	btfss	3,2
  2056  04AB  2CB2               	goto	l1762
  2057  04AC  01F3               	clrf	MAX7219_Transfer@value
  2058  04AD  0AF3               	incf	MAX7219_Transfer@value,f
  2059  04AE  3002               	movlw	2
  2060  04AF  3186  2629         	fcall	_MAX7219_Transfer
  2061  04B1  0008               	return
  2062  04B2                     l1762:	
  2063                           
  2064                           ;main.c: 322: else if (ADC_H == 121) MAX7219_Transfer(0x02, 2);
  2065  04B2  3079               	movlw	121
  2066  04B3  067A               	xorwf	_ADC_H,w
  2067  04B4  1D03               	btfss	3,2
  2068  04B5  2CBE               	goto	l1766
  2069  04B6  3002               	movlw	2
  2070  04B7  00F7               	movwf	??_UpdateDisplay
  2071  04B8  0877               	movf	??_UpdateDisplay,w
  2072  04B9  00F3               	movwf	MAX7219_Transfer@value
  2073  04BA  3002               	movlw	2
  2074  04BB  3186  2629         	fcall	_MAX7219_Transfer
  2075  04BD  0008               	return
  2076  04BE                     l1766:	
  2077                           
  2078                           ;main.c: 323: else if (ADC_H == 122) MAX7219_Transfer(0x02, 3);
  2079  04BE  307A               	movlw	122
  2080  04BF  067A               	xorwf	_ADC_H,w
  2081  04C0  1D03               	btfss	3,2
  2082  04C1  2CCA               	goto	l1770
  2083  04C2  3003               	movlw	3
  2084  04C3  00F7               	movwf	??_UpdateDisplay
  2085  04C4  0877               	movf	??_UpdateDisplay,w
  2086  04C5  00F3               	movwf	MAX7219_Transfer@value
  2087  04C6  3002               	movlw	2
  2088  04C7  3186  2629         	fcall	_MAX7219_Transfer
  2089  04C9  0008               	return
  2090  04CA                     l1770:	
  2091                           
  2092                           ;main.c: 324: else if (ADC_H == 123) MAX7219_Transfer(0x02, 4);
  2093  04CA  307B               	movlw	123
  2094  04CB  067A               	xorwf	_ADC_H,w
  2095  04CC  1D03               	btfss	3,2
  2096  04CD  2CD6               	goto	l1774
  2097  04CE  3004               	movlw	4
  2098  04CF  00F7               	movwf	??_UpdateDisplay
  2099  04D0  0877               	movf	??_UpdateDisplay,w
  2100  04D1  00F3               	movwf	MAX7219_Transfer@value
  2101  04D2  3002               	movlw	2
  2102  04D3  3186  2629         	fcall	_MAX7219_Transfer
  2103  04D5  0008               	return
  2104  04D6                     l1774:	
  2105                           
  2106                           ;main.c: 325: else if (ADC_H == 124) MAX7219_Transfer(0x02, 5);
  2107  04D6  307C               	movlw	124
  2108  04D7  067A               	xorwf	_ADC_H,w
  2109  04D8  1D03               	btfss	3,2
  2110  04D9  2CE2               	goto	l1778
  2111  04DA  3005               	movlw	5
  2112  04DB  00F7               	movwf	??_UpdateDisplay
  2113  04DC  0877               	movf	??_UpdateDisplay,w
  2114  04DD  00F3               	movwf	MAX7219_Transfer@value
  2115  04DE  3002               	movlw	2
  2116  04DF  3186  2629         	fcall	_MAX7219_Transfer
  2117  04E1  0008               	return
  2118  04E2                     l1778:	
  2119                           
  2120                           ;main.c: 326: else if (ADC_H == 125) MAX7219_Transfer(0x02, 6);
  2121  04E2  307D               	movlw	125
  2122  04E3  067A               	xorwf	_ADC_H,w
  2123  04E4  1D03               	btfss	3,2
  2124  04E5  2CEE               	goto	l1782
  2125  04E6  3006               	movlw	6
  2126  04E7  00F7               	movwf	??_UpdateDisplay
  2127  04E8  0877               	movf	??_UpdateDisplay,w
  2128  04E9  00F3               	movwf	MAX7219_Transfer@value
  2129  04EA  3002               	movlw	2
  2130  04EB  3186  2629         	fcall	_MAX7219_Transfer
  2131  04ED  0008               	return
  2132  04EE                     l1782:	
  2133                           
  2134                           ;main.c: 327: else if (ADC_H == 126) MAX7219_Transfer(0x02, 7);
  2135  04EE  307E               	movlw	126
  2136  04EF  067A               	xorwf	_ADC_H,w
  2137  04F0  1D03               	btfss	3,2
  2138  04F1  2CFA               	goto	l1786
  2139  04F2  3007               	movlw	7
  2140  04F3  00F7               	movwf	??_UpdateDisplay
  2141  04F4  0877               	movf	??_UpdateDisplay,w
  2142  04F5  00F3               	movwf	MAX7219_Transfer@value
  2143  04F6  3002               	movlw	2
  2144  04F7  3186  2629         	fcall	_MAX7219_Transfer
  2145  04F9  0008               	return
  2146  04FA                     l1786:	
  2147                           
  2148                           ;main.c: 328: else if (ADC_H == 127) MAX7219_Transfer(0x02, 8);
  2149  04FA  307F               	movlw	127
  2150  04FB  067A               	xorwf	_ADC_H,w
  2151  04FC  1D03               	btfss	3,2
  2152  04FD  2D06               	goto	l1790
  2153  04FE  3008               	movlw	8
  2154  04FF  00F7               	movwf	??_UpdateDisplay
  2155  0500  0877               	movf	??_UpdateDisplay,w
  2156  0501  00F3               	movwf	MAX7219_Transfer@value
  2157  0502  3002               	movlw	2
  2158  0503  3186  2629         	fcall	_MAX7219_Transfer
  2159  0505  0008               	return
  2160  0506                     l1790:	
  2161                           
  2162                           ;main.c: 329: else if (ADC_H == 128) MAX7219_Transfer(0x02, 9);
  2163  0506  3080               	movlw	128
  2164  0507  067A               	xorwf	_ADC_H,w
  2165  0508  1D03               	btfss	3,2
  2166  0509  2D12               	goto	l1794
  2167  050A  3009               	movlw	9
  2168  050B  00F7               	movwf	??_UpdateDisplay
  2169  050C  0877               	movf	??_UpdateDisplay,w
  2170  050D  00F3               	movwf	MAX7219_Transfer@value
  2171  050E  3002               	movlw	2
  2172  050F  3186  2629         	fcall	_MAX7219_Transfer
  2173  0511  0008               	return
  2174  0512                     l1794:	
  2175                           
  2176                           ;main.c: 330: else MAX7219_Transfer(0x02, 0);
  2177  0512  01F3               	clrf	MAX7219_Transfer@value
  2178  0513  3002               	movlw	2
  2179  0514  3186  2629         	fcall	_MAX7219_Transfer
  2180                           
  2181                           ;main.c: 331: }
  2182  0516  0008               	return
  2183  0517                     l1796:	
  2184                           
  2185                           ;main.c: 332: else if(ADC_H >= 129 && ADC_H <= 138)
  2186  0517  3081               	movlw	129
  2187  0518  027A               	subwf	_ADC_H,w
  2188  0519  1C03               	skipc
  2189  051A  2D96               	goto	l1840
  2190  051B  308B               	movlw	139
  2191  051C  027A               	subwf	_ADC_H,w
  2192  051D  1803               	skipnc
  2193  051E  2D96               	goto	l1840
  2194                           
  2195                           ;main.c: 333: {
  2196                           ;main.c: 334: MAX7219_Transfer(0x01, 9);
  2197  051F  3009               	movlw	9
  2198  0520  00F7               	movwf	??_UpdateDisplay
  2199  0521  0877               	movf	??_UpdateDisplay,w
  2200  0522  00F3               	movwf	MAX7219_Transfer@value
  2201  0523  3001               	movlw	1
  2202  0524  3186  2629  3180   	fcall	_MAX7219_Transfer
  2203                           
  2204                           ;main.c: 337: if(ADC_H == 130) MAX7219_Transfer(0x02, 1);
  2205  0527  3082               	movlw	130
  2206  0528  067A               	xorwf	_ADC_H,w
  2207  0529  1D03               	btfss	3,2
  2208  052A  2D31               	goto	l1806
  2209  052B  01F3               	clrf	MAX7219_Transfer@value
  2210  052C  0AF3               	incf	MAX7219_Transfer@value,f
  2211  052D  3002               	movlw	2
  2212  052E  3186  2629         	fcall	_MAX7219_Transfer
  2213  0530  0008               	return
  2214  0531                     l1806:	
  2215                           
  2216                           ;main.c: 338: else if (ADC_H == 131) MAX7219_Transfer(0x02, 2);
  2217  0531  3083               	movlw	131
  2218  0532  067A               	xorwf	_ADC_H,w
  2219  0533  1D03               	btfss	3,2
  2220  0534  2D3D               	goto	l1810
  2221  0535  3002               	movlw	2
  2222  0536  00F7               	movwf	??_UpdateDisplay
  2223  0537  0877               	movf	??_UpdateDisplay,w
  2224  0538  00F3               	movwf	MAX7219_Transfer@value
  2225  0539  3002               	movlw	2
  2226  053A  3186  2629         	fcall	_MAX7219_Transfer
  2227  053C  0008               	return
  2228  053D                     l1810:	
  2229                           
  2230                           ;main.c: 339: else if (ADC_H == 132) MAX7219_Transfer(0x02, 3);
  2231  053D  3084               	movlw	132
  2232  053E  067A               	xorwf	_ADC_H,w
  2233  053F  1D03               	btfss	3,2
  2234  0540  2D49               	goto	l1814
  2235  0541  3003               	movlw	3
  2236  0542  00F7               	movwf	??_UpdateDisplay
  2237  0543  0877               	movf	??_UpdateDisplay,w
  2238  0544  00F3               	movwf	MAX7219_Transfer@value
  2239  0545  3002               	movlw	2
  2240  0546  3186  2629         	fcall	_MAX7219_Transfer
  2241  0548  0008               	return
  2242  0549                     l1814:	
  2243                           
  2244                           ;main.c: 340: else if (ADC_H == 133) MAX7219_Transfer(0x02, 4);
  2245  0549  3085               	movlw	133
  2246  054A  067A               	xorwf	_ADC_H,w
  2247  054B  1D03               	btfss	3,2
  2248  054C  2D55               	goto	l1818
  2249  054D  3004               	movlw	4
  2250  054E  00F7               	movwf	??_UpdateDisplay
  2251  054F  0877               	movf	??_UpdateDisplay,w
  2252  0550  00F3               	movwf	MAX7219_Transfer@value
  2253  0551  3002               	movlw	2
  2254  0552  3186  2629         	fcall	_MAX7219_Transfer
  2255  0554  0008               	return
  2256  0555                     l1818:	
  2257                           
  2258                           ;main.c: 341: else if (ADC_H == 134) MAX7219_Transfer(0x02, 5);
  2259  0555  3086               	movlw	134
  2260  0556  067A               	xorwf	_ADC_H,w
  2261  0557  1D03               	btfss	3,2
  2262  0558  2D61               	goto	l1822
  2263  0559  3005               	movlw	5
  2264  055A  00F7               	movwf	??_UpdateDisplay
  2265  055B  0877               	movf	??_UpdateDisplay,w
  2266  055C  00F3               	movwf	MAX7219_Transfer@value
  2267  055D  3002               	movlw	2
  2268  055E  3186  2629         	fcall	_MAX7219_Transfer
  2269  0560  0008               	return
  2270  0561                     l1822:	
  2271                           
  2272                           ;main.c: 342: else if (ADC_H == 135) MAX7219_Transfer(0x02, 6);
  2273  0561  3087               	movlw	135
  2274  0562  067A               	xorwf	_ADC_H,w
  2275  0563  1D03               	btfss	3,2
  2276  0564  2D6D               	goto	l1826
  2277  0565  3006               	movlw	6
  2278  0566  00F7               	movwf	??_UpdateDisplay
  2279  0567  0877               	movf	??_UpdateDisplay,w
  2280  0568  00F3               	movwf	MAX7219_Transfer@value
  2281  0569  3002               	movlw	2
  2282  056A  3186  2629         	fcall	_MAX7219_Transfer
  2283  056C  0008               	return
  2284  056D                     l1826:	
  2285                           
  2286                           ;main.c: 343: else if (ADC_H == 136) MAX7219_Transfer(0x02, 7);
  2287  056D  3088               	movlw	136
  2288  056E  067A               	xorwf	_ADC_H,w
  2289  056F  1D03               	btfss	3,2
  2290  0570  2D79               	goto	l1830
  2291  0571  3007               	movlw	7
  2292  0572  00F7               	movwf	??_UpdateDisplay
  2293  0573  0877               	movf	??_UpdateDisplay,w
  2294  0574  00F3               	movwf	MAX7219_Transfer@value
  2295  0575  3002               	movlw	2
  2296  0576  3186  2629         	fcall	_MAX7219_Transfer
  2297  0578  0008               	return
  2298  0579                     l1830:	
  2299                           
  2300                           ;main.c: 344: else if (ADC_H == 137) MAX7219_Transfer(0x02, 8);
  2301  0579  3089               	movlw	137
  2302  057A  067A               	xorwf	_ADC_H,w
  2303  057B  1D03               	btfss	3,2
  2304  057C  2D85               	goto	l1834
  2305  057D  3008               	movlw	8
  2306  057E  00F7               	movwf	??_UpdateDisplay
  2307  057F  0877               	movf	??_UpdateDisplay,w
  2308  0580  00F3               	movwf	MAX7219_Transfer@value
  2309  0581  3002               	movlw	2
  2310  0582  3186  2629         	fcall	_MAX7219_Transfer
  2311  0584  0008               	return
  2312  0585                     l1834:	
  2313                           
  2314                           ;main.c: 345: else if (ADC_H == 138) MAX7219_Transfer(0x02, 9);
  2315  0585  308A               	movlw	138
  2316  0586  067A               	xorwf	_ADC_H,w
  2317  0587  1D03               	btfss	3,2
  2318  0588  2D91               	goto	l1838
  2319  0589  3009               	movlw	9
  2320  058A  00F7               	movwf	??_UpdateDisplay
  2321  058B  0877               	movf	??_UpdateDisplay,w
  2322  058C  00F3               	movwf	MAX7219_Transfer@value
  2323  058D  3002               	movlw	2
  2324  058E  3186  2629         	fcall	_MAX7219_Transfer
  2325  0590  0008               	return
  2326  0591                     l1838:	
  2327                           
  2328                           ;main.c: 346: else MAX7219_Transfer(0x02, 0);
  2329  0591  01F3               	clrf	MAX7219_Transfer@value
  2330  0592  3002               	movlw	2
  2331  0593  3186  2629         	fcall	_MAX7219_Transfer
  2332                           
  2333                           ;main.c: 347: }
  2334  0595  0008               	return
  2335  0596                     l1840:	
  2336                           
  2337                           ;main.c: 348: else if(ADC_H > 138)
  2338  0596  308B               	movlw	139
  2339  0597  027A               	subwf	_ADC_H,w
  2340  0598  1C03               	skipc
  2341  0599  2DAA               	goto	l1844
  2342                           
  2343                           ;main.c: 349: {
  2344                           ;main.c: 350: MAX7219_Transfer(0x01, 9);
  2345  059A  3009               	movlw	9
  2346  059B  00F7               	movwf	??_UpdateDisplay
  2347  059C  0877               	movf	??_UpdateDisplay,w
  2348  059D  00F3               	movwf	MAX7219_Transfer@value
  2349  059E  3001               	movlw	1
  2350  059F  3186  2629  3180   	fcall	_MAX7219_Transfer
  2351                           
  2352                           ;main.c: 351: MAX7219_Transfer(0x02, 9);
  2353  05A2  3009               	movlw	9
  2354  05A3  00F7               	movwf	??_UpdateDisplay
  2355  05A4  0877               	movf	??_UpdateDisplay,w
  2356  05A5  00F3               	movwf	MAX7219_Transfer@value
  2357  05A6  3002               	movlw	2
  2358  05A7  3186  2629         	fcall	_MAX7219_Transfer
  2359                           
  2360                           ;main.c: 352: }
  2361  05A9  0008               	return
  2362  05AA                     l1844:	
  2363                           
  2364                           ;main.c: 353: else
  2365                           ;main.c: 354: {
  2366                           ;main.c: 355: MAX7219_Transfer(0x01, 0);
  2367  05AA  01F3               	clrf	MAX7219_Transfer@value
  2368  05AB  3001               	movlw	1
  2369  05AC  3186  2629  3180   	fcall	_MAX7219_Transfer
  2370                           
  2371                           ;main.c: 356: MAX7219_Transfer(0x02, 0);
  2372  05AF  01F3               	clrf	MAX7219_Transfer@value
  2373  05B0  3002               	movlw	2
  2374  05B1  3186  2629         	fcall	_MAX7219_Transfer
  2375  05B3  0008               	return
  2376  05B4                     __end_of_UpdateDisplay:	
  2377                           
  2378                           	psect	text2
  2379  0646                     __ptext2:	
  2380 ;; *************** function _Timer0_Init *****************
  2381 ;; Defined at:
  2382 ;;		line 135 in file "main.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2396 ;;      Params:         0       0       0       0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0       0
  2399 ;;      Totals:         0       0       0       0       0       0       0       0
  2400 ;;Total ram usage:        0 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    1
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           
  2411                           ;psect for function _Timer0_Init
  2412  0646                     _Timer0_Init:	
  2413                           
  2414                           ;main.c: 137: T0CON0 = 0b10000000;
  2415                           
  2416                           ;incstack = 0
  2417                           ; Regs used in _Timer0_Init: [wreg]
  2418  0646  3080               	movlw	128
  2419  0647  0020               	movlb	0	; select bank0
  2420  0648  0097               	movwf	23	;volatile
  2421                           
  2422                           ;main.c: 138: T0CON1 = 0b01000110;
  2423  0649  3046               	movlw	70
  2424  064A  0098               	movwf	24	;volatile
  2425                           
  2426                           ;main.c: 139: PIE0 = 0b00100000;
  2427  064B  3020               	movlw	32
  2428  064C  0021               	movlb	1	; select bank1
  2429  064D  0090               	movwf	16	;volatile
  2430                           
  2431                           ;main.c: 140: INTCONbits.GIE = 1;
  2432  064E  178B               	bsf	11,7	;volatile
  2433                           
  2434                           ;main.c: 141: TMR0Hbits.TMR0H = 180;
  2435  064F  30B4               	movlw	180
  2436  0650  0020               	movlb	0	; select bank0
  2437  0651  0096               	movwf	22	;volatile
  2438  0652  0008               	return
  2439  0653                     __end_of_Timer0_Init:	
  2440                           
  2441                           	psect	text3
  2442  05B4                     __ptext3:	
  2443 ;; *************** function _MAX7219_Init *****************
  2444 ;; Defined at:
  2445 ;;		line 118 in file "main.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, pclath, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2459 ;;      Params:         0       0       0       0       0       0       0       0
  2460 ;;      Locals:         0       0       0       0       0       0       0       0
  2461 ;;      Temps:          1       0       0       0       0       0       0       0
  2462 ;;      Totals:         1       0       0       0       0       0       0       0
  2463 ;;Total ram usage:        1 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    3
  2466 ;; This function calls:
  2467 ;;		_MAX7219_Transfer
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           
  2474                           ;psect for function _MAX7219_Init
  2475  05B4                     _MAX7219_Init:	
  2476                           
  2477                           ;main.c: 121: PORTCbits.RC3 = 0;
  2478                           
  2479                           ;incstack = 0
  2480                           ; Regs used in _MAX7219_Init: [wreg+status,2+status,0+pclath+cstack]
  2481  05B4  0020               	movlb	0	; select bank0
  2482  05B5  118E               	bcf	14,3	;volatile
  2483                           
  2484                           ;main.c: 122: MAX7219_Transfer(0x0F, 0x01);
  2485  05B6  01F3               	clrf	MAX7219_Transfer@value
  2486  05B7  0AF3               	incf	MAX7219_Transfer@value,f
  2487  05B8  300F               	movlw	15
  2488  05B9  3186  2629  3185   	fcall	_MAX7219_Transfer
  2489                           
  2490                           ;main.c: 123: MAX7219_Transfer(0x0F, 0x00);
  2491  05BC  01F3               	clrf	MAX7219_Transfer@value
  2492  05BD  300F               	movlw	15
  2493  05BE  3186  2629  3185   	fcall	_MAX7219_Transfer
  2494                           
  2495                           ;main.c: 124: MAX7219_Transfer(0x09, 0x0F);
  2496  05C1  300F               	movlw	15
  2497  05C2  00F7               	movwf	??_MAX7219_Init
  2498  05C3  0877               	movf	??_MAX7219_Init,w
  2499  05C4  00F3               	movwf	MAX7219_Transfer@value
  2500  05C5  3009               	movlw	9
  2501  05C6  3186  2629  3185   	fcall	_MAX7219_Transfer
  2502                           
  2503                           ;main.c: 125: MAX7219_Transfer(0x0A, 0x0F);
  2504  05C9  300F               	movlw	15
  2505  05CA  00F7               	movwf	??_MAX7219_Init
  2506  05CB  0877               	movf	??_MAX7219_Init,w
  2507  05CC  00F3               	movwf	MAX7219_Transfer@value
  2508  05CD  300A               	movlw	10
  2509  05CE  3186  2629  3185   	fcall	_MAX7219_Transfer
  2510                           
  2511                           ;main.c: 126: MAX7219_Transfer(0x0B, 0x01);
  2512  05D1  01F3               	clrf	MAX7219_Transfer@value
  2513  05D2  0AF3               	incf	MAX7219_Transfer@value,f
  2514  05D3  300B               	movlw	11
  2515  05D4  3186  2629  3185   	fcall	_MAX7219_Transfer
  2516                           
  2517                           ;main.c: 127: MAX7219_Transfer(0x0C, 0x01);
  2518  05D7  01F3               	clrf	MAX7219_Transfer@value
  2519  05D8  0AF3               	incf	MAX7219_Transfer@value,f
  2520  05D9  300C               	movlw	12
  2521  05DA  3186  2629  3185   	fcall	_MAX7219_Transfer
  2522                           
  2523                           ;main.c: 129: MAX7219_Transfer(0x01, 6);
  2524  05DD  3006               	movlw	6
  2525  05DE  00F7               	movwf	??_MAX7219_Init
  2526  05DF  0877               	movf	??_MAX7219_Init,w
  2527  05E0  00F3               	movwf	MAX7219_Transfer@value
  2528  05E1  3001               	movlw	1
  2529  05E2  3186  2629  3185   	fcall	_MAX7219_Transfer
  2530                           
  2531                           ;main.c: 130: MAX7219_Transfer(0x02, 6);
  2532  05E5  3006               	movlw	6
  2533  05E6  00F7               	movwf	??_MAX7219_Init
  2534  05E7  0877               	movf	??_MAX7219_Init,w
  2535  05E8  00F3               	movwf	MAX7219_Transfer@value
  2536  05E9  3002               	movlw	2
  2537  05EA  3186  2629  3185   	fcall	_MAX7219_Transfer
  2538                           
  2539                           ;main.c: 132: MAX7219_Transfer(0x00, 0x00);
  2540  05ED  01F3               	clrf	MAX7219_Transfer@value
  2541  05EE  3000               	movlw	0
  2542  05EF  3186  2629         	fcall	_MAX7219_Transfer
  2543  05F1  0008               	return
  2544  05F2                     __end_of_MAX7219_Init:	
  2545                           
  2546                           	psect	text4
  2547  0629                     __ptext4:	
  2548 ;; *************** function _MAX7219_Transfer *****************
  2549 ;; Defined at:
  2550 ;;		line 144 in file "main.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  address         1    wreg     unsigned char 
  2553 ;;  value           1    3[COMMON] unsigned char 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  address         1    6[COMMON] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, pclath, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2565 ;;      Params:         1       0       0       0       0       0       0       0
  2566 ;;      Locals:         1       0       0       0       0       0       0       0
  2567 ;;      Temps:          2       0       0       0       0       0       0       0
  2568 ;;      Totals:         4       0       0       0       0       0       0       0
  2569 ;;Total ram usage:        4 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    2
  2572 ;; This function calls:
  2573 ;;		_SPI_SHIFT_8
  2574 ;; This function is called by:
  2575 ;;		_MAX7219_Init
  2576 ;;		_UpdateDisplay
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function _MAX7219_Transfer
  2582  0629                     _MAX7219_Transfer:	
  2583                           
  2584                           ;incstack = 0
  2585                           ; Regs used in _MAX7219_Transfer: [wreg+status,2+status,0+pclath+cstack]
  2586                           ;MAX7219_Transfer@address stored from wreg
  2587  0629  00F6               	movwf	MAX7219_Transfer@address
  2588                           
  2589                           ;main.c: 146: SPI_SHIFT_8(address);
  2590  062A  0876               	movf	MAX7219_Transfer@address,w
  2591  062B  3186  2660  3186   	fcall	_SPI_SHIFT_8
  2592                           
  2593                           ;main.c: 147: SPI_SHIFT_8(value);
  2594  062E  0873               	movf	MAX7219_Transfer@value,w
  2595  062F  3186  2660  3186   	fcall	_SPI_SHIFT_8
  2596                           
  2597                           ;main.c: 148: PORTCbits.RC3 = 0;
  2598  0632  0020               	movlb	0	; select bank0
  2599  0633  118E               	bcf	14,3	;volatile
  2600                           
  2601                           ;main.c: 150: if (count++ >= 5000)
  2602  0634  0879               	movf	_count+1,w
  2603  0635  00F5               	movwf	??_MAX7219_Transfer+1
  2604  0636  0878               	movf	_count,w
  2605  0637  00F4               	movwf	??_MAX7219_Transfer
  2606  0638  0AF8               	incf	_count,f
  2607  0639  1903               	skipnz
  2608  063A  0AF9               	incf	_count+1,f
  2609  063B  3013               	movlw	19
  2610  063C  0275               	subwf	??_MAX7219_Transfer+1,w
  2611  063D  3088               	movlw	136
  2612  063E  1903               	skipnz
  2613  063F  0274               	subwf	??_MAX7219_Transfer,w
  2614  0640  1C03               	skipc
  2615  0641  2E44               	goto	l1350
  2616                           
  2617                           ;main.c: 151: {
  2618                           ;main.c: 152: count = 0;
  2619  0642  01F8               	clrf	_count
  2620  0643  01F9               	clrf	_count+1
  2621  0644                     l1350:	
  2622                           
  2623                           ;main.c: 153: }
  2624                           ;main.c: 155: PORTCbits.RC3 = 1;
  2625  0644  158E               	bsf	14,3	;volatile
  2626  0645  0008               	return
  2627  0646                     __end_of_MAX7219_Transfer:	
  2628                           
  2629                           	psect	text5
  2630  0660                     __ptext5:	
  2631 ;; *************** function _SPI_SHIFT_8 *****************
  2632 ;; Defined at:
  2633 ;;		line 360 in file "main.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  data            1    wreg     unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  data            1    2[COMMON] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      unsigned char 
  2640 ;; Registers used:
  2641 ;;		wreg
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2647 ;;      Params:         0       0       0       0       0       0       0       0
  2648 ;;      Locals:         1       0       0       0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0
  2650 ;;      Totals:         1       0       0       0       0       0       0       0
  2651 ;;Total ram usage:        1 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_MAX7219_Transfer
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           
  2662                           ;psect for function _SPI_SHIFT_8
  2663  0660                     _SPI_SHIFT_8:	
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _SPI_SHIFT_8: [wreg]
  2667                           ;SPI_SHIFT_8@data stored from wreg
  2668  0660  00F2               	movwf	SPI_SHIFT_8@data
  2669                           
  2670                           ;main.c: 362: SSP1CONbits.WCOL = 0;
  2671  0661  0024               	movlb	4	; select bank4
  2672  0662  1395               	bcf	21,7	;volatile
  2673                           
  2674                           ;main.c: 363: SSP1BUF = data;
  2675  0663  0872               	movf	SPI_SHIFT_8@data,w
  2676  0664  0091               	movwf	17	;volatile
  2677  0665                     l325:	
  2678                           ;main.c: 364: while(SSP1STATbits.BF == 0){}
  2679                           
  2680  0665  1C14               	btfss	20,0	;volatile
  2681  0666  2E65               	goto	l325
  2682                           
  2683                           ;main.c: 365: return (SSP1BUF);
  2684                           ;	Return value of _SPI_SHIFT_8 is never used
  2685  0667  0811               	movf	17,w	;volatile
  2686  0668  0008               	return
  2687  0669                     __end_of_SPI_SHIFT_8:	
  2688                           
  2689                           	psect	text6
  2690  0653                     __ptext6:	
  2691 ;; *************** function _ADC_Init *****************
  2692 ;; Defined at:
  2693 ;;		line 108 in file "main.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2707 ;;      Params:         0       0       0       0       0       0       0       0
  2708 ;;      Locals:         0       0       0       0       0       0       0       0
  2709 ;;      Temps:          0       0       0       0       0       0       0       0
  2710 ;;      Totals:         0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        0 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    1
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _ADC_Init
  2723  0653                     _ADC_Init:	
  2724                           
  2725                           ;main.c: 111: TRISCbits.TRISC2 = 1;
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _ADC_Init: [wreg]
  2729  0653  0021               	movlb	1	; select bank1
  2730  0654  150E               	bsf	14,2	;volatile
  2731                           
  2732                           ;main.c: 112: ANSELCbits.ANSC2 = 1;
  2733  0655  0023               	movlb	3	; select bank3
  2734  0656  150E               	bsf	14,2	;volatile
  2735                           
  2736                           ;main.c: 113: ADCON0 = 0b01001001;
  2737  0657  3049               	movlw	73
  2738  0658  0021               	movlb	1	; select bank1
  2739  0659  009D               	movwf	29	;volatile
  2740                           
  2741                           ;main.c: 114: ADCON1 = 0b01000011;
  2742  065A  3043               	movlw	67
  2743  065B  009E               	movwf	30	;volatile
  2744                           
  2745                           ;main.c: 115: FVRCON = 0b11000001;
  2746  065C  30C1               	movlw	193
  2747  065D  0022               	movlb	2	; select bank2
  2748  065E  0097               	movwf	23	;volatile
  2749  065F  0008               	return
  2750  0660                     __end_of_ADC_Init:	
  2751                           
  2752                           	psect	intentry
  2753  0004                     __pintentry:	
  2754 ;; *************** function _my_isr *****************
  2755 ;; Defined at:
  2756 ;;		line 158 in file "main.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2770 ;;      Params:         0       0       0       0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0       0
  2772 ;;      Temps:          2       0       0       0       0       0       0       0
  2773 ;;      Totals:         2       0       0       0       0       0       0       0
  2774 ;;Total ram usage:        2 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		Interrupt level 1
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783  0004                     _my_isr:	
  2784                           
  2785                           ;incstack = 0
  2786  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2787                           
  2788                           ; Regs used in _my_isr: [wreg]
  2789  0005  3180               	pagesel	$
  2790  0006  0020               	movlb	0	; select bank0
  2791  0007  087F               	movf	127,w
  2792  0008  00F1               	movwf	??_my_isr+1
  2793                           
  2794                           ;main.c: 160: if(TMR0IF && TMR0IE)
  2795  0009  1E90               	btfss	16,5	;volatile
  2796  000A  2818               	goto	i1l97
  2797  000B  0021               	movlb	1	; select bank1
  2798  000C  1E90               	btfss	16,5	;volatile
  2799  000D  2818               	goto	i1l97
  2800  000E                     i1l94:	
  2801                           ;main.c: 161: {
  2802                           ;main.c: 162: while(ADCON0bits.ADGO == 1){}
  2803                           
  2804  000E  189D               	btfsc	29,1	;volatile
  2805  000F  280E               	goto	i1l94
  2806                           
  2807                           ;main.c: 163: ADC_H = ADRESH;
  2808  0010  081C               	movf	28,w	;volatile
  2809  0011  00F0               	movwf	??_my_isr
  2810  0012  0870               	movf	??_my_isr,w
  2811  0013  00FA               	movwf	_ADC_H
  2812                           
  2813                           ;main.c: 165: TMR0IF = 0;
  2814  0014  0020               	movlb	0	; select bank0
  2815  0015  1290               	bcf	16,5	;volatile
  2816                           
  2817                           ;main.c: 166: ADCON0bits.ADGO = 1;
  2818  0016  0021               	movlb	1	; select bank1
  2819  0017  149D               	bsf	29,1	;volatile
  2820  0018                     i1l97:	
  2821  0018  0871               	movf	??_my_isr+1,w
  2822  0019  0020               	movlb	0	; select bank0
  2823  001A  00FF               	movwf	127
  2824  001B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2825  001C  0009               	retfie
  2826  001D                     __end_of_my_isr:	
  2827  007E                     btemp	set	126	;btemp
  2828  007E                     int$flags	set	126
  2829  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      2       2
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_MAX7219_Init
    _main->_UpdateDisplay
    _UpdateDisplay->_MAX7219_Transfer
    _MAX7219_Init->_MAX7219_Transfer
    _MAX7219_Transfer->_SPI_SHIFT_8

Critical Paths under _my_isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _my_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _my_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _my_isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14322
                                              0 BANK0      2     2      0
                           _ADC_Init
                       _MAX7219_Init
                        _Timer0_Init
                      _UpdateDisplay
 ---------------------------------------------------------------------------------
 (1) _UpdateDisplay                                        1     1      0    7161
                                              7 COMMON     1     1      0
                   _MAX7219_Transfer
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Init                                         1     1      0    7161
                                              7 COMMON     1     1      0
                   _MAX7219_Transfer
 ---------------------------------------------------------------------------------
 (2) _MAX7219_Transfer                                     4     3      1    7161
                                              3 COMMON     4     3      1
                        _SPI_SHIFT_8
 ---------------------------------------------------------------------------------
 (3) _SPI_SHIFT_8                                          1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _my_isr                                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _MAX7219_Init
     _MAX7219_Transfer
       _SPI_SHIFT_8
   _Timer0_Init
   _UpdateDisplay
     _MAX7219_Transfer
       _SPI_SHIFT_8

 _my_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      2       2       6        2.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0       D      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 18 22:28:17 2018

          ??_UpdateDisplay 0077                __CFG_CP$OFF 0000                __CFG_LVP$ON 0000  
                      l325 0665               __CFG_CPD$OFF 0000                       l1400 00A2  
                     l1410 00BA                       l1350 0644                       l1510 01DC  
                     l1502 01C4                       l1430 00F6                       l1422 00DE  
                     l1414 00C6                       l1610 02FE                       l1602 02E6  
                     l1530 0218                       l1522 0200                       l1514 01E8  
                     l1506 01D0                       l1442 011A                       l1434 0102  
                     l1426 00EA                       l1418 00D2                       l1370 0049  
                     l1620 031B                       l1532 021D                       l1444 011F  
                     l1702 0408                       l1630 0335                       l1614 030A  
                     l1606 02F2                       l1550 024F                       l1542 0237  
                     l1526 020C                       l1518 01F4                       l1470 0169  
                     l1462 0151                       l1454 0139                       l1438 010E  
                     l1390 0085                       l1382 006D                       l1374 0055  
                     l1366 003D                       l1810 053D                       l1730 0457  
                     l1722 043F                       l1706 0414                       l1650 0371  
                     l1642 0359                       l1634 0341                       l1618 0316  
                     l1570 028B                       l1562 0273                       l1554 025B  
                     l1546 0243                       l1482 018D                       l1474 0175  
                     l1466 015D                       l1458 0145                       l1394 0091  
                     l1386 0079                       l1378 0061                       l1708 0419  
                     l1830 0579                       l1822 0561                       l1814 0549  
                     l1806 0531                       l1750 0493                       l1742 047B  
                     l1734 0463                       l1726 044B                       l1718 0433  
                     l1662 0395                       l1654 037D                       l1646 0365  
                     l1638 034D                       l1590 02C2                       l1574 0297  
                     l1566 027F                       l1558 0267                       l1486 0199  
                     l1478 0181                       l1398 009D                       l1840 0596  
                     l1752 0498                       l1664 039A                       l1576 029C  
                     l1488 019E                       l1834 0585                       l1826 056D  
                     l1818 0555                       l1770 04CA                       l1762 04B2  
                     l1746 0487                       l1738 046F                       l1690 03E4  
                     l1682 03CC                       l1674 03B4                       l1658 0389  
                     l1594 02CE                       l1586 02B6                       l1498 01B8  
                     l1844 05AA                       l1838 0591                       l1790 0506  
                     l1782 04EE                       l1774 04D6                       l1766 04BE  
                     l1694 03F0                       l1686 03D8                       l1678 03C0  
                     l1598 02DA                       l1794 0512                       l1786 04FA  
                     l1778 04E2                       l1698 03FC                       l1796 0517  
                     l1888 0614                       _PIE0 0090                       i1l94 000E  
                     i1l97 0018               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
                     _main 05F2                       btemp 007E           __end_of_ADC_Init 0660  
            __CFG_BOREN$ON 0000              __CFG_BORV$LOW 0000                       start 001D  
            __CFG_CSWEN$ON 0000              __CFG_MCLRE$ON 0000                      ?_main 0070  
                    _ADC_H 007A              __CFG_WDTE$OFF 0000             __CFG_DEBUG$OFF 0000  
                    _TRISC 008E                      _count 0078       __end_of_MAX7219_Init 05F2  
                    status 0003                      wtemp0 007E            __initialization 001F  
             __end_of_main 0629                     ??_main 0020                     _ADCON0 009D  
                   _ADCON1 009E                     _ADRESH 009C         __CFG_RSTOSC$HFINT1 0000  
                   _T0CON0 0017                     _T0CON1 0018                     _RC4PPS 0EA4  
                   _RC5PPS 0EA5                     _FVRCON 0117                     _OSCFRQ 091F  
                   _TMR0IE 0485                     _TMR0IF 0085          ?_MAX7219_Transfer 0073  
            ??_Timer0_Init 0072             __CFG_PWRTE$OFF 0000         ??_MAX7219_Transfer 0074  
           __CFG_STVREN$ON 0000                     _my_isr 0004                  ?_ADC_Init 0070  
    MAX7219_Transfer@value 0073            SPI_SHIFT_8@data 0072               ?_SPI_SHIFT_8 0070  
  __end_of__initialization 0022             __pcstackCOMMON 0070        __end_of_Timer0_Init 0653  
               ??_ADC_Init 0072      __size_of_MAX7219_Init 003E                 __pmaintext 05F2  
          __CFG_PPS1WAY$ON 0000                 __pintentry 0004      __end_of_UpdateDisplay 05B4  
                  ?_my_isr 0070               _MAX7219_Init 05B4                    _OSCCON1 0919  
                  _PPSLOCK 0E0F                    _SSP1BUF 0211                _Timer0_Init 0646  
                  __ptext1 0026                    __ptext2 0646                    __ptext3 05B4  
                  __ptext4 0629                    __ptext5 0660                    __ptext6 0653  
          __size_of_my_isr 0019       end_of_initialization 0022       __size_of_SPI_SHIFT_8 0009  
                _TMR0Hbits 0016                  _PORTCbits 000E  __size_of_MAX7219_Transfer 001D  
                _TRISCbits 008E          __size_of_ADC_Init 000D           __CFG_FEXTOSC$OFF 0000  
           __end_of_my_isr 001D        start_initialization 001F           __CFG_LPBOREN$OFF 0000  
                 ??_my_isr 0070                __pbssCOMMON 0078                  ___latbits 0001  
            __pcstackBANK0 0020               ?_Timer0_Init 0070           _MAX7219_Transfer 0629  
                 _ADC_Init 0653     __size_of_UpdateDisplay 058E                   _SSP1CON1 0215  
               _ADCON0bits 009D              ??_SPI_SHIFT_8 0072              _UpdateDisplay 0026  
               _ANSELCbits 018E              __size_of_main 0037        __end_of_SPI_SHIFT_8 0669  
     __size_of_Timer0_Init 000D                   int$flags 007E             ?_UpdateDisplay 0070  
             _SSP1STATbits 0214              ?_MAX7219_Init 0070                 _INTCONbits 000B  
                 intlevel1 0000          __CFG_CLKOUTEN$OFF 0000   __end_of_MAX7219_Transfer 0646  
              _SSP1CONbits 0215    MAX7219_Transfer@address 0076             ??_MAX7219_Init 0077  
              _SPI_SHIFT_8 0660  
